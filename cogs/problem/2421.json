{"title":"[HZOI 2016] 简单的Treap","time_limit":2000,"memory_limit":256,"url":"http://cogs.pro:8080/cogs/problem/problem.php?pid=vNNNmVqVk","statement":[{"title":"# 题目描述","format":"html","require":["katex"],"content":"\n\n<h3>\n【题目描述】\n</h3>\n<p>\nTreap是一种平衡二叉搜索树，除二叉搜索树的基本性质外，Treap还满足一个性质：\n</p>\n<p>\n每个节点都有一个确定的优先级，且每个节点的优先级都比它的两个儿子小(即它的优先级满足堆性质)。\n</p>\n<p>\n不难证明在节点的优先级都事先给定且互不相同时，对应的Treap有且仅有一个。\n</p>\n<p>\n现在，给定n个数和每个数对应的优先级，求出对应的以数的大小作为二叉搜索树比较依据的Treap的先序遍历结果。\n</p>\n<p>\n对先序遍历的定义是：先访问根节点，再访问左子树，最后访问右子树。\n</p>\n<h3>\n【输入格式】\n</h3>\n<p>\n第一行一个数n表示数的个数。\n</p>\n<p>\n第二行n个数表示每个数的大小。\n</p>\n<p>\n第三行n个数表示每个数对应的优先级。\n</p>\n<h3>\n【输出格式】\n</h3>\n<p>\n一行n个数，表示Treap的先序遍历结果(对于每个节点，输出对应的数)。\n</p>\n<h3>\n【样例输入】\n</h3>\n<pre>7\n2 11 5 9 1 4 3\n2 10 1 8 4 6 5\n</pre>\n<h3>\n【样例输出】\n</h3>\n<pre>5 2 1 3 4 9 11</pre>\n<h3>\n【样例解释】\n</h3>\n<p>\n对应的Treap如图所示，其中圈内的数是给出的数，圈外的数是节点的优先级。\n</p>\n<p>\n<img src=\"/upload/image/20160807/20160807190522_51607.png\" alt=\"\"/> \n</p>\n<h3>\n【数据范围】\n</h3>\n<p>\nn&lt;=500000。\n</p>\n<p>\n所有的数和优先级都互不相同且在int(C++)/longint(Pascal)范围内。\n</p>\n<h3>\n【提示】\n</h3>\n<p>\n为了给不想用栈模拟递归的孩纸们偷懒的机会，C++选手请在main函数的开头加入以下代码：\n</p>\n<p>\nint __size__=128&lt;&lt;20;\n</p>\n<p>\nchar *__p__=(char*)malloc(__size__)+__size__;\n</p>\n<p>\n__asm__(&#34;movl %0, %%esp\\n&#34;::&#34;r&#34;(__p__));\n</p>\n<p>\n注意上述代码会占用你128MB的空间，请自行调整代码。\n</p>\n<h3>\n【来源】\n</h3>\n<p>\nHZOI 2016\n</p>\n\n"}]}