{"title":"DAGCH","time_limit":2000,"memory_limit":256,"url":"http://cogs.pro:8080/cogs/problem/problem.php?pid=vXSSzVkkW","statement":[{"title":"# 题目描述","format":"html","require":["katex"],"content":"\n\n<div id=\"psrc\" style=\"margin-top:20px;display:none;\">\n<div class=\"pdsec\">\n试题来源\n</div>\n<div class=\"pdcont\">\nCodeChef February Challenge 2014\n</div>\n</div>\n<div id=\"pinputs\" style=\"display:none;\">\n<div class=\"pdsec\">\n输入数据\n</div>\n<div class=\"pdcont\">\n<span class=\"notice\"> 这是一道提交答案的试题，下面给出了该题的输入数据：</span> \n</div>\n<div id=\"inputlist\" class=\"pddata\">\n</div>\n</div>\n<p>\n<br/>\n</p>\n<div class=\"pdsec\">\n问题描述\n</div>\n<p>\n厨师Hawlader和厨师Heickal是好朋友。除了烹饪以为，他们还喜爱算法。Hawlader喜欢图论而Heickal喜欢数论。<br/>\n<br/>\n又一次，厨师Hawlader给厨师Heickal讲授图论。“嘿，Heical，你应该更专注于对图论的学习。数论中还剩下什么呢？图论是这个世界的全部，你甚至可以将数论问题规划到图论来解决，你懂吗？”Hawlader说。而对于Heickal来说，他并不厌恶图论，根据她的理论，生活应该是数论，图论，动态规划，数据结构，ad hoc等等等等的混合。要成为一命优秀的厨师，你必须知道所有这些东西而不仅仅只有图论。<br/>\n<br/>\nHecikal：“哦，你是图论的大师？那你知道DFS？”<br/>\nHawlader：“当然，DFS，深度优先搜索，这是一个基本的图论算法。”<br/>\nHecikal：“因此，对于任意一幅图，你可以按照DFS进入的时间给他们编号？”<br/>\nHawlader：“太简单了。用下面的伪代码就行了”<br/>\n<br/>\nint C = 1;<br/>\nvoid DFS(int u)  {<br/>\nnew_number[u] = C;<br/>\nC++;<br/>\n// initially all value of visited array is set to false<br/>\nvisited[u] = true;<br/>\n// here v can be chosen in an arbitrary order<br/>\nfor each v such that there is a edge from u to v<br/>\nif(visited[v] == false)<br/>\nDFS(v);<br/>\n}<br/>\n<br/>\nHecikal：“好的，我可以给你一个难一点的问题了。”<br/>\nHawlader：“什么？放马过来吧！”<br/>\nHecikal：“我会给你一个有N个节点，M条边的有向图。每个节点编号按照是上面的伪代码生成的。并且，从1号点出发，所有的节点都可达。”<br/>\nHawlader：“好的，那问题呢？”<br/>\nHecikal：“等等，我给你一些定义，一个节点x被称为是另一个节点y的supreme vertex，如果存在一条有向路x = v_0, v_1, ..., v_k = y，满足x &lt; y &lt; w，对于所有0 &lt; i &lt; k。也就是说，一条从x出发到y有0个或更多个中间节点的有向路，满足所有中间节点的编号都大于x和y的编号，并且x的编号小于y。如果v是另一个节点w所有的supreme vertex中编号最小的，v被称为是w的superior vertex。你将得到Q个询问。每个询问，将会给定一个节点v，你需要找出有多少节点，将v视为其superior vertex。”<br/>\nHawlader：“噢！呃...”\n</p>\n<p>\n厨师Hawlader无法解决这个问题，他正在向你求助。\n</p>\n<p>\n<br/>\n</p>\n<p>\n<br/>\n</p>\n<div class=\"pdsec\">\n输入格式\n</div>\n<p>\n输入数据的第一行有一个整数T，表示数据的组数。每组测试数据的地养护，有三个整数N,M,Q。接下来的M行，每行有一对整数U_i和V_i表示一条从U_i出发，指向V_i的有向边。接下来的一行包含Q个用空格隔开的整数，P_1,P_2,...,P_q。每个整数表示一组询问。\n</p>\n<p>\n<br/>\n</p>\n<div class=\"pdsec\">\n输出格式\n</div>\n<p>\n对于每组询问，输出一行表示对应的结果。\n</p>\n<p>\n<br/>\n</p>\n<div class=\"pdsec\">\n样例输入\n</div>\n<p>\n2<br/>\n3 3 3<br/>\n1 2<br/>\n1 3<br/>\n3 2<br/>\n1 2 3<br/>\n8 9 8<br/>\n1 2<br/>\n1 7<br/>\n2 3<br/>\n2 5<br/>\n3 4<br/>\n5 6<br/>\n7 8<br/>\n6 4<br/>\n8 4\n</p>\n<p>\n1 2 3 4 5 6 7 8\n</p>\n<p>\n<br/>\n</p>\n<p>\n<br/>\n</p>\n<div class=\"pdsec\">\n样例输出\n</div>\n<p>\n2 0 0\n</p>\n<p>\n3 2 0 0 1 0 1 0\n</p>\n<p>\n<br/>\n</p>\n<p>\n<br/>\n</p>\n<div class=\"pdsec\">\n样例说明\n</div>\n<p>\n样例一中，结点3有且仅有1作为其supreme vertex和superior vertex。因为有一条1到3的有向边。结点2有一个superme vertex 1（1 -&gt; 3 -&gt; 2）。因为结点2仅有这一个supreme vertex，所以这个结点也是其superior vertex。\n</p>\n<p>\n样例二中，结点4有两个supreme vertex 1 （1 -&gt; 7 -&gt; 8 -&gt; 4） 和 2 （2 -&gt; 5 -&gt; 6 -&gt; 4），因此结点1是结点4的superior vertex。\n</p>\n<p>\n<br/>\n</p>\n<p>\n<br/>\n</p>\n<div class=\"pdsec\">\n数据规模和约定\n</div>\n<p>\n1 &lt;= T &lt;= 10<br/>\n2 &lt;= N &lt;= 100000<br/>\nN-1 &lt;= M &lt;= 200000<br/>\n1 &lt;= Q &lt;= 100000<br/>\n1 &lt;= U_i, V_i &lt;= N,  且U_i不等于V_i\n</p>\n<p>\n没有重边，所有结点从1号结点可达\n</p>\n<p>\n<br/>\n</p>\n<p>\n<br/>\n</p>\n<p>\n<br/>\n</p>\n<div id=\"pcont2\" style=\"margin-top:20px;display:none;\">\n<p>\n【问题描述】<br/>\n    厨师Hawlader和厨师Heickal是好朋友。除了烹饪以为，他们还喜爱算法。Hawlader喜欢图论而Heickal喜欢数论。\n</p>\n<p>\n \n</p>\n<p>\n    又一次，厨师Hawlader给厨师Heickal讲授图论。“嘿，Heical，你应该更专注于对图论的学习。数论中还剩下什么呢？图论是这个世界的全部，你甚至可以将数论问题规划到图论来解决，你懂吗？”Hawlader说。而对于Heickal来说，他并不厌恶图论，根据她的理论，生活应该是数论，图论，动态规划，数据结构，ad hoc等等等等的混合。要成为一命优秀的厨师，你必须知道所有这些东西而不仅仅只有图论。\n</p>\n<p>\n \n</p>\n<p>\n    Hecikal：“哦，你是图论的大师？那你知道DFS？”\n</p>\n<p>\n    Hawlader：“当然，DFS，深度优先搜索，这是一个基本的图论算法。”\n</p>\n<p>\n    Hecikal：“因此，对于任意一幅图，你可以按照DFS进入的时间给他们编号？”\n</p>\n<p>\n    Hawlader：“太简单了。用下面的伪代码就行了”\n</p>\n<p>\n \n</p>\n<p>\nint C = 1;\n</p>\n<p>\nvoid DFS(int u)  {\n</p>\n<p>\n    new_number[u] = C;\n</p>\n<p>\n    C++;\n</p>\n<p>\n    // initially all value of visited array is set to false\n</p>\n<p>\n    visited[u] = true;\n</p>\n<p>\n    // here v can be chosen in an arbitrary order\n</p>\n<p>\n    for each v such that there is a edge from u to v\n</p>\n<p>\n        if(visited[v] == false)\n</p>\n<p>\n            DFS(v);\n</p>\n<p>\n}\n</p>\n<p>\n \n</p>\n<p>\n    Hecikal：“好的，我可以给你一个难一点的问题了。”\n</p>\n<p>\n    Hawlader：“什么？放马过来吧！”\n</p>\n<p>\n    Hecikal：“我会给你一个有N个节点，M条边的有向图。每个节点编号按照是上面的伪代码生成的。并且，从1号点出发，所有的节点都可达。”\n</p>\n<p>\n    Hawlader：“好的，那问题呢？”\n</p>\n<p>\n    Hecikal：“等等，我给你一些定义，一个节点x被称为是另一个节点y的supreme vertex，如果存在一条有向路x = v_0, v_1, ..., v_k = y，满足x &lt; y &lt; w，对于所有0 &lt; i &lt; k。也就是说，一条从x出发到y有0个或更多个中间节点的有向路，满足所有中间节点的编号都大于x和y的编号，并且x的编号小于y。如果v是另一个节点w所有的supreme vertex中编号最小的，v被称为是w的superior vertex。你将得到Q个询问。每个询问，将会给定一个节点v，你需要找出有多少节点，将v视为其superior vertex。”\n</p>\n<p>\n    Hawlader：“噢！呃...”\n</p>\n<p>\n    厨师Hawlader无法解决这个问题，他正在向你求助。<br/>\n【输入格式】\n</p>\n<p>\n    输入数据的第一行有一个整数T，表示数据的组数。每组测试数据的地养护，有三个整数N,M,Q。接下来的M行，每行有一对整数U_i和V_i表示一条从U_i出发，指向V_i的有向边。接下来的一行包含Q个用空格隔开的整数，P_1,P_2,...,P_q。每个整数表示一组询问。\n</p>\n<p>\n【输出格式】\n</p>\n<p>\n    对于每组询问，输出一行表示对应的结果。<br/>\n【样例输入】\n</p>\n<p>\n2\n</p>\n<p>\n3 3 3\n</p>\n<p>\n1 2\n</p>\n<p>\n1 3\n</p>\n<p>\n3 2\n</p>\n<p>\n1 2 3\n</p>\n<p>\n8 9 8\n</p>\n<p>\n1 2\n</p>\n<p>\n1 7\n</p>\n<p>\n2 3\n</p>\n<p>\n2 5\n</p>\n<p>\n3 4\n</p>\n<p>\n5 6\n</p>\n<p>\n7 8\n</p>\n<p>\n6 4\n</p>\n<p>\n8 4\n</p>\n<p>\n 1 2 3 4 5 6 7 8\n</p>\n<p>\n【样例输出】\n</p>\n<p>\n2 0 0\n</p>\n<p>\n3 2 0 0 1 0 1 0\n</p>\n<p>\n【样例解释】\n</p>\n<p>\n    样例一中，结点3有且仅有1作为其supreme vertex和superior vertex。因为有一条1到3的有向边。结点2有一个superme vertex 1（1 -&gt; 3 -&gt; 2）。因为结点2仅有这一个supreme vertex，所以这个结点也是其superior vertex。\n</p>\n<p>\n    样例二中，结点4有两个supreme vertex 1 （1 -&gt; 7 -&gt; 8 -&gt; 4） 和 2 （2 -&gt; 5 -&gt; 6 -&gt; 4），因此结点1是结点4的superior vertex。\n</p>\n<p>\n【数据规模和约定】\n</p>\n<p>\n1 &lt;= T &lt;= 10\n</p>\n<p>\n2 &lt;= N &lt;= 100000\n</p>\n<p>\nN-1 &lt;= M &lt;= 200000\n</p>\n<p>\n1 &lt;= Q &lt;= 100000\n</p>\n<p>\n1 &lt;= U_i, V_i &lt;= N,  且U_i不等于V_i\n</p>\n<p>\n没有重边，所有结点从1号结点可达\n</p>\n</div>\n<br/>\n<div id=\"pcode\" class=\"code\">\n<div id=\"pcodesu\" style=\"display:none;\">\n<hr/>\n<span class=\"notice\">这是一道完善程序的试题，你只需要在下面程序标注的&#34;<span class=\"code\"><span class=\"Y\">@你的代码</span></span>&#34;的位置补充适当的语句或语句段使程序能正确运行即可，在提交的时候，你要提交的内容只包括补充的内容，不包括其他的代码。</span> \n</div>\n</div>\n\n"}]}