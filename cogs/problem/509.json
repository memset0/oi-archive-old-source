{"title":"邮递员","time_limit":1000,"memory_limit":128,"url":"http://cogs.pro:8080/cogs/problem/problem.php?pid=pSzXmmgaP","statement":[{"title":"题目描述","format":"html","require":["katex"],"content":"\n\n<h3>\n\t【题目描述】\n</h3>\n<p>\n\t<br/>\n邮局需要你来帮助他们为某个邮递员设计出一条能够穿过那遥远乡村的所有村子和小路至少一次的邮路（输入数据将会保证这么一条路是一定存在的）。 <br/>\n但是，每条路线都是有一个花费的。各个村子里的村民希望邮递员到达他们村子的时间越早越好。因此，各个村子里的人们采用了一些措施：假设第i号村子是邮递员在他的邮递路线上到达的第k个村子。如果k&lt;=w( i )，那么这个村子的村民就会付给邮局w( i )-k欧元。当然，如果k&gt;w(i)，邮局也同意付k- w( i )欧元给这个村子，对某些村子重复经过要重复收费。此外，邮递员每经过一条小路，邮局也要付给邮递员1欧元作为补贴。 <br/>\n现在有n个村子，编号依次为1到n。邮局就位于1号村子，因此邮递员的传递路线从这里开始，也从这个村子结束。能够离开每个村子的路口的数目一定是2，4或者8。这里允许出现同样的村子间存在多条小路，或者某条小路构成了一个自环的情况。 <br/>\n你的任务是设计一个路线使得邮局赚的钱最多(或者说赔的钱最少。如果有多种最优解，输出字典序最小的。 <br/>\n<img src=\"/upload/image/20120925/20120925165338_73738.gif\" alt=\"\"/>\n</p>\n<h3>\n\t【输入】\n</h3>\n<p>\n\t<br/>\n第一行：两个整数n，m，分别表示村子的数量和小路的数量。 <br/>\n接下来n行，每行一个整数：w(i)(1≤w(i)&lt;1000) <br/>\n接下来m行，每行两个整数u，v，表示这条小路连接的村子的编号。\n</p>\n<h3>\n\t【输出】\n</h3>\n<p>\n\t<br/>\n第一行：一个整数k，你的程序所设计的路径的长度 <br/>\n第二行：k+1个整数，v1，v2…vk+l，每个数之间用一个空格隔开，表示你设计的路径所经过的村子的编号，其中需要满足v1=vk+1=1\n</p>\n<h3>\n\t【输入样例】\n</h3>\n<p>\n\t<br/>\ncarrier.in\n</p>\n<p>\n\t6 7 <br/>\n1 <br/>\n7 <br/>\n4 <br/>\n10 <br/>\n20 <br/>\n5 <br/>\n2 4 <br/>\n1 5 <br/>\n2 1 <br/>\n4 5 <br/>\n3 6 <br/>\n1 6 <br/>\n1 3\n</p>\n<h3>\n\t【输出样例】\n</h3>\n<p>\n\t<br/>\ncarrier.out\n</p>\n<p>\n\t7 <br/>\n1 2 4 5 1 3 6 1\n</p>\n<h3>\n\t【提示】\n</h3>\n<p>\n\t<br/>\n对于30％的数据，有N&lt;=20 <br/>\n对于100%的数据，有N&lt;=200; <br/>\n补充说明：邮递员每条路线都要去送信，并且每条线路只要送一次就可以了。\n</p>\n\n"}]}