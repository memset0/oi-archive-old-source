{"title":"[BOI]名次排序","time_limit":1000,"memory_limit":256,"url":"http://cogs.pro:8080/cogs/problem/problem.php?pid=vzQzNVajg","statement":[{"title":"# 题目描述","format":"html","require":["katex"],"content":"\n\n<h3>\n【题目描述】\n</h3>\n<p>\n<br/>\n</p>\n<p>\n已知参赛选手的得分，你的任务是按照得分从高到底给出选手的排名。\n</p>\n<p>\n遗憾的是，保存选手信息的数据结构只支持一种操作，即将一个选手从位置i移动到位置j，该移动不改变其他选手的相对位置，即如果i &gt; j，位置j和位置i-1之间的选手的位置都比原来加1，相反如果 i &lt; j，则位置i+1和位置j之间的选手的位置都比原来减一。上述移动的操作的代价定义为i+j，这里，位置编号从1开始。请你编程确定一个移动选手的步骤，将选手按照得分从高到低排序，并使整个移动过程的总代价最小。\n</p>\n<p>\n<br/>\n</p>\n<h3>\n【输入格式】\n</h3>\n<p>\n第一行为一个整数n（2&lt;=n&lt;=1000），表示选手的人数；接下来的n行，每行一个非负整数Si( 0&lt;=Si&lt;=1000000)，表示一个选手的得分。你可以认为每人的得分是不同的。\n</p>\n<h3>\n【输出格式】\n</h3>\n<p>\n文件sorting.out的第一行为一个整数，表示移动的次数，接下来的每一行表示一个移动步骤，每个移动步骤用两个整数i, j表示，表示位置i的选手移动到位置j，i和j之间有一个空格隔开。（优先移动i&gt;j的情况）\n</p>\n<h3>\n【样例输入】\n</h3>\n<pre><p>\n5\n</p>\n\n<p>\n20\n</p>\n\n<p>\n30\n</p>\n\n<p>\n5\n</p>\n\n<p>\n15\n</p>\n\n<p>\n10\n</p>\n</pre>\n<h3>\n【样例输出】\n</h3>\n<p>\n2\n</p>\n<p>\n<br/>\n3 5\n</p>\n<p>\n2 1\n</p>\n<h3>\n【提示】\n</h3>\n<p>\n在此键入。\n</p>\n<h3>\n【来源】\n</h3>\n<p>\n在此键入。\n</p>\n\n"}]}