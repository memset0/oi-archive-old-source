{"title":"[POJ 1442] 黑匣子","time_limit":1000,"memory_limit":128,"url":"http://cogs.pro:8080/cogs/problem/problem.php?pid=pNiJXQeak","statement":[{"title":"题目描述","format":"html","require":["katex"],"content":"\n\n<div style=\"line-height:15pt;\" align=\"left\">\n<b>【问题描述】</b><br/>\n我们使用黑匣子的一个简单模型。它能存放一个整数序列和一个特别的变量i。在初始时刻，黑匣子为空且i等于0。这个黑匣子能执行一系列的命令。有两类命令： ADD(x)：把元素x放入黑匣子；GET：把i加1的同时，输出黑匣子内所有整数中第i小的数。牢记第i小的数是当黑匣子中的元素已非降序排序后位于第i位的元素。<br/>\n下面的表是一个11个命令的例子：\n</div>\n<div style=\"line-height:15pt;\" align=\"left\">\n \n</div>\n<table border=\"1\" cellspacing=\"1\" cellpadding=\"1\" width=\"571\" align=\"center\" height=\"263\">\n<tbody>\n<tr>\n<td>\n编号\n</td>\n<td>\n命令\n</td>\n<td>\ni\n</td>\n<td>\n黑匣子内容\n</td>\n<td>\n输出\n</td>\n</tr>\n<tr>\n<td>\n1\n</td>\n<td>\nADD(3)\n</td>\n<td>\n0\n</td>\n<td>\n3\n</td>\n<td>\n \n</td>\n</tr>\n<tr>\n<td>\n2\n</td>\n<td>\nGET\n</td>\n<td>\n1\n</td>\n<td>\n3\n</td>\n<td>\n3\n</td>\n</tr>\n<tr>\n<td>\n3\n</td>\n<td>\nADD(1)\n</td>\n<td>\n1\n</td>\n<td>\n1,3\n</td>\n<td>\n \n</td>\n</tr>\n<tr>\n<td>\n4\n</td>\n<td>\nGET\n</td>\n<td>\n2\n</td>\n<td>\n1,3\n</td>\n<td>\n3\n</td>\n</tr>\n<tr>\n<td>\n5\n</td>\n<td>\nADD(-4)\n</td>\n<td>\n2\n</td>\n<td>\n-4,1,3\n</td>\n<td>\n \n</td>\n</tr>\n<tr>\n<td>\n6\n</td>\n<td>\nADD(2)\n</td>\n<td>\n2\n</td>\n<td>\n-4,1,2,3\n</td>\n<td>\n \n</td>\n</tr>\n<tr>\n<td>\n7\n</td>\n<td>\nADD(8)\n</td>\n<td>\n2\n</td>\n<td>\n-4,1,2,3,8\n</td>\n<td>\n \n</td>\n</tr>\n<tr>\n<td>\n8\n</td>\n<td>\nADD(-1000)\n</td>\n<td>\n2\n</td>\n<td>\n-1000,-4,1,2,3,8\n</td>\n<td>\n \n</td>\n</tr>\n<tr>\n<td>\n9\n</td>\n<td>\nGET\n</td>\n<td>\n3\n</td>\n<td>\n-1000,-4,1,2,3,8\n</td>\n<td>\n1\n</td>\n</tr>\n<tr>\n<td>\n10\n</td>\n<td>\nGET\n</td>\n<td>\n4\n</td>\n<td>\n-1000,-4,1,2,3,8\n</td>\n<td>\n2\n</td>\n</tr>\n<tr>\n<td>\n11\n</td>\n<td>\nADD(2)\n</td>\n<td>\n4\n</td>\n<td>\n-1000,-4,1,2,2,3,8\n</td>\n<td>\n \n</td>\n</tr>\n</tbody>\n</table>\n<div style=\"line-height:15pt;\" align=\"left\">\n \n</div>\n<div style=\"line-height:15pt;\" align=\"left\">\n现需要一个有效的算法处理给定的一系列命令。ADD和GET命令的总数至多有30000个。定义ADD命令的个数为M个，GET命令的个数为N个。我们用下面的两个整数序列描述命令序列：<br/>\n(1)A(1)，A(2)，…，A(M)：加入黑匣子的元素序列。所有的数均为绝对值不超过2000000的整数。例如在上例中A＝(3，1，-4，2，8，-1000，2)。<br/>\n(2)u(1)，u(2)，…，u(N)：u(i)表示第i个GET命令在第u(i)个ADD命令之后，例如在上例中，u＝(1，2，6，6)。<br/>\n你可以假定自然数序列u(1)，u(2)，…，u(N)以非降序排列，N≤M，且对于每一个p(1≤p≤N)有p≤u(p)≤M。<br/>\n<br/>\n【输入格式】 <br/>\n     输入文件名为blackbox.in，其中第一行存放M和N的值，第二行存放A(1)，A(2)，…，<br/>\nA(M)，第三行存放u(1)，u(2)，…，u(N)。\n</div>\n<div style=\"line-height:15pt;\" align=\"left\">\n【输出格式】 <br/>\n   输出黑匣子的处理结果。<br/>\n【输入输出样例】 <b><br/>\n</b>输入:<br/>\nblackbox.in<br/>\n7 4<br/>\n3 1 -4 2 8 -1000 2<br/>\n1 2 6 6\n</div>\n<div style=\"line-height:15pt;\" align=\"left\">\n输出:<br/>\nblackbox.out<br/>\n3 <br/>\n3 <br/>\n1 <br/>\n2\n</div>\n\n"}]}