{"title":"黑白棋游戏","time_limit":1000,"memory_limit":64,"url":"http://www.joyoi.cn/problem/tyvj-3084","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>\n　　黑白棋游戏的棋盘由4×4方格阵列构成。棋盘的每一方格中放有1枚棋子，共有8枚白棋子和8枚黑棋子。这16枚棋子的每一种放置方案都构成一个游戏状态。在棋盘上拥有1条公共边的2个方格称为相邻方格。一个方格最多可有4个相邻方格。在玩黑白棋游戏时，每一步可将任何2个相邻方格中棋子互换位置。对于给定的初始游戏状态和目标游戏状态，编程计算从初始游戏状态变化到目标游戏状态的最短着棋序列。</p> \n\n \n # 输入格式 \n<p>\n　　输入文件共有8行。前四行是初始游戏状态，后四行是目标游戏状态。每行4个数分别表示该行放置的棋子颜色。“0”表示白棋；“1”表示黑棋。</p> \n\n \n # 输出格式 \n<p>\n　　输出文件，一行，是着棋步数n。</p> \n\n \n # 提示 \n<p>\n【知识准备】\r<br>　　（1）宽度优先搜索的基本概念；\r<br>　　（2）位操作相关知识。\r<br>【算法分析】\r<br>　　本题是一道典型的宽度优先搜索题。宽度优先搜索的方法本身应该是很显然的：根据题目的描述，对于任意一个棋盘状态，可以通过交换相邻两个格子中的棋子得到新的状态（一次最多得到24个新状态）。所以，我们可以从题目给出的起始状态开始不停的扩展，直至扩展出目标状态。最后，只需输出扩展的路径即可。\r<br>　　上述算法已经可以完全解决本题了。但是，我们现在要继续往细节里讨论本题，讨论本题的实现。\r<br>　　宽度优先搜索的核心是状态的扩展，状态的扩展是通过状态转换实现的。普通的状态转换的方法就是按照题目的定义模拟实现。这里，我们要讨论的是高效简洁的状态转换的方法。\r<br>　　首先是状态的表示。题目中的棋盘是由16个格子组成的(4×4)，如下图。\r<br>a1　　　a2　　　a3\t　　　a4\r<br>a5　　　a6　　　a7　　　a8\r<br>a9　　　a10　　a11\t　　　a12\r<br>a13　　　a14　　a15　　　a16\r<br>　　这16个格子，每个格子里非0即1，所以可以将棋盘写成一个长度为16的01串。\r<br>a1\ta2\ta3\ta4\ta5\ta6\ta7\ta8\ta9\ta10\ta11\ta12\ta13\ta14\ta15\ta16\r<br>　　这个0l串可以用一个16bit的整数来表示。也就是说，我们可以用一个0～65535的整数来表示一个状态。\r<br>　　下面最关键的就是状态的转换了。根据题目的定义，每次操作可以交换棋盘上相邻两个格子中的棋子。显然，如果相邻两个格子中的棋子相同，交换是没有意义的，所以我们只需要考虑相邻格子中棋子颜色不同的情况。相邻有两种情况，左右相邻和上下相邻。如图，a1和a2为左右相邻，而a8和a12为上下相邻。我们讨论状态转换的时候，将对这两种“相邻”分别处理。\r<br>a1\ta2\ta3\ta4\r<br>a5\ta6\ta7\ta8\r<br>a9\ta10\ta11\ta12\r<br>a13\ta14\ta15\ta16\r<br>图7-2\r<br>　　首先来看左右相邻的情况，以a15和a16为例。它们交换以后，得到的棋盘状态为：\r<br>a1\ta2\ta3\ta4\r<br>a5\ta6\ta7\ta8\r<br>a9\ta10\ta11\ta12\r<br>a13\ta14\ta16\ta15\r<br>图7-3\r<br>　　但是，从另一个角度来考虑问题，a15＝??a16，所以经过转换后，就相当于将a15和a16取反。从位操作的角度来看，设原状态为s，那么a15和a16交换后得到的新状态s15为：\r<br>　　s15=s xor 3\r<br>　　同样的，还可以推出a14和a15交换后得到的新状态s14为：\r<br>　　s14=s xor 6=s xor (3*21)\r<br>　　当然，还有以下很多状态公式：\r<br>　　s13=s xor 12=s xor(3*22)\r<br>　　s11=s xor 48=s xor(3*24)\r<br>　　s10=s xor 96=s xor(3*25)\r<br>　　这里有两个需要注意之点：\r<br>　　（1）交换的两个棋子的颜色必须不同，否则公式不成立；\r<br>　　（2）根据状态转换的定义s4、s8、s12、s16对应的公式不成立，因为它们右边没有相邻的棋子。\r<br>　　最后，我们总结一下左右相邻情况下的状态转换公式（棋子颜色必须不同）\r<br>　　sk=s xor(3*215-k)，其中k≠4, 8, 12, 16\r<br>　　与“左右相邻”对应的是“上下相邻”。“上下相邻”情况的分析与“左右相邻”类似，这里就不详细展开了，只列出转换的公式（同样，棋子颜色也必须不同）\r<br>　　sk=s xor(17*212-k)，其中k≤12\r<br>　　有了上面两个状态转换的公式，我们只需将起始状态和目标状态转换成16bit的整数，利用公式从起始状态扩展至目标状态即可。整个过程的时间复杂度是O(24*216)。\r<br>　　从另一个角度考虑问题。本题给出了起始状态和目标状态，那么我们完全可以从这两个状态开始，分别扩展——也就是用双向宽度优先搜索的方法来解决本题。一般来说，双向搜索扩展出的状态总数要比单向少很多，时间和空间复杂度都会有所降低。</p> "},{"title":"# 样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>1111\t\t\t\t\t\t\t\r\n0000\t\t\t\t\t\t\r\n1110\t\t\t\t\t\t\t\r\n0010\t\t\t\t\t\t\r\n1010\t\t\t\t\t\t\r\n0101\r\n1010\r\n0101\r\n</td><td>4</td></tr></table>\n\n"}]}