{"title":"cactus仙人掌图","time_limit":1000,"memory_limit":161,"url":"http://www.joyoi.cn/problem/tyvj-3497","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>\n如果某个无向连通图的任意一条边至多只出现在一条简单回路（simple cycle）里，我们就称这张图为仙人图（cactus）。所谓简单回路就是指在图上不重复经过任何一个顶点的回路。\r<br>\r<br><img border=\"0\" src=\"/source/joyoi/tyvj-3497/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzQ5Ny9wcm9ibGVtc19pbWFnZXMvMjMyMi8xLmpwZw==.jpg\">\r<br>\r<br>举例来说，上面的第一个例子是一张仙人图，而第二个不是——注意到它有三条简单回路：（4，3，2，1，6，5，4）、（7，8，9，10，2，3，7）以及（4，3，7，8，9，10，2，1，6，5，4），而（2，3）同时出现在前两个的简单回路里。另外，第三张图也不是仙人图，因为它并不是连通图。\r<br>显然，仙人图上的每条边，或者是这张仙人图的桥（bridge），或者在且仅在一个简单回路里，两者必居其一。定义在图上两点之间的距离为这两点之间最短路径的距离。定义一个图的直径为这张图相距最远的两个点的距离。现在我们假定仙人图的每条边的权值都是1，你的任务是求出给定的仙人图的直径。\r<br>\r<br></p> \n\n \n # 输入格式 \n<p>\n输入的第一行包括两个整数n和m（1≤n≤50000以及0≤m≤10000）。其中n代表顶点个数，我们约定图中的顶点将从1到n编号。\r<br>接下来一共有m行。代表m条路径。每行的开始有一个整数k（2≤k≤1000），代表在这条路径上的顶点个数。接下来是k个1到n之间的整数，分别对应了一个顶点，相邻的顶点表示存在一条连接这两个顶点的边。一条路径上可能通过一个顶点好几次，比如对于第一个样例，第一条路径从3经过8，又从8返回到了3，但是我们保证所有的边都会出现在某条路径上，而且不会重复出现在两条路径上，或者在一条路径上出现两次。\r<br>\r<br></p> \n\n \n # 输出格式 \n<p>\n只需输出一个数，这个数表示仙人图的直径长度。\r<br>\r<br></p> \n\n \n # 提示 \n<p>\n对第一个样例的说明：\r<br>如图，6号点和12号点的最短路径长度为8，所以这张图的直径为8。\r<br><img border=\"0\" src=\"/source/joyoi/tyvj-3497/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzQ5Ny9wcm9ibGVtc19pbWFnZXMvMjMyMi8yLmpwZw==.jpg\">\r<br>【注意】\r<br>使用Pascal语言的选手请注意：\r<br>你的程序在处理大数据的时候可能会出现栈溢出。如果需要调整栈空间的大小，可以在程序的开头填加一句：{$M 5000000}，其中5000000即指代栈空间的大小，请根据自己的程序选择适当的数值。\r<br></p> "},{"title":"# 样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>15 3\r\n9 1 2 3 4 5 6 7 8 3\r\n7 2 9 10 11 12 13 10\r\n5 2 14 9 15 10\t8\r\n10 1\r\n10 1 2 3 4 5 6 7 8 9 10\t\r\n</td><td>\n9\r\n</td></tr></table>\n\n"}]}