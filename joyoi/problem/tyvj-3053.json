{"title":"扇区填数","time_limit":1000,"memory_limit":64,"url":"http://www.joyoi.cn/problem/tyvj-3053","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>\n　　有一个圆，当输入一个整数n(1≤n≤6)后，它被分成n个扇区，请你为每一扇区选择一个自然数(大于0的整数)。\r<br>　　向各个扇区放入数之后，你可以从单个扇区中选出—个数，也可以从相邻的两个或多个扇区中各选一个数，相加后形成一个新的数，请使用这些整数形成一个连续的整数序列，：1，2，3，…，i，你的任务是使i尽可能地大。\r<br></p> \n\n \n # 输入格式 \n<p>\n　　只一个整数n(1 <＝ n <＝ 6)。</p> \n\n \n # 输出格式 \n<p>\n　　第一行是最大的i，接下来的几行是所有能达到最大i的填法。\r<br>　　由于圆里不分顺序，所以同一种填法可以有多种输出。为了减少这种情况，这里规定从1，开始输出(因为连续数里要有1，所以所填的数中肯定有1)。\r<br></p> \n\n \n # 提示 \n<p>\n　　假设圆已经被分成了n个扇区，并且已经在这n个扇区中填好了数字，先来看看填好数字后最多有多少种选择连续的数字并求和的方法，以N＝4为例：\r<br>　　单独选一个，有n种即1、2、3、4；\r<br>　　选择相邻两个也有n种即12、23、34、41\r<br>　　选择相邻三个也有n种即123、234、341、412；\r<br>　　选择相邻四个只有一种即1234。\r<br>　　总共有n*(n-1)+1种，当n=4时有13种。\r<br>　　如果每一种选择所求的和都不同，那么能够构成的最多有n*(n-1)+1个不同的数。我们当然希望能够达到的最大的连续数就是从1到n*(n-1)+1了，如N=4时就是1到13。\r<br>　　现在的问题是如何保证这n*(n-1)+1个数就是从1到n*(n-1)+1。在填数时首先填1，接下来的n-1个数都保证不同且最小为2，再看其他的取相邻的多个数的情况了。在n<＝6的情况下都能满足这个要求，对于n>6时就不一定了。\r<br>　　从这种最优策略出发，再结合搜索法找出所有可能的情况。\r<br></p> "},{"title":"样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>1</td><td>1\r\n1</td></tr></table>\n\n"}]}