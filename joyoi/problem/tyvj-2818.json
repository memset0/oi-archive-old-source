{"title":"字符解密","time_limit":1000,"memory_limit":64,"url":"http://www.joyoi.cn/problem/tyvj-2818","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>\n喜欢钻研问题的JS同学，最近又迷上了对加密方法的思考。一天，他突然想出了一种他认为是终极的加密办法：把需要加密的信息排成一圈，显然，它们有很多种不同的读法。例如右图，可以读作：\r<br>\tJSOI07\r<br>\tSOI07J\r<br>\tOI07JS\r<br>\tI07JSO\r<br>\t07JSOI\r<br>\t7JSOI0\r<br>把它们按照字符串的大小排序：\r<br>\t07JSOI\r<br>\t7JSOI0\r<br>\tI07JSO\r<br>\tJSOI07\r<br>\tOI07JS\r<br>\tSOI07J\r<br>读出最后一列字符：I0O7SJ，就是加密后的字符串。\r<br>\t\r<br>而另外一位同学却说：“其实这种方法用脑想一下，就会觉得很容易破解。。。。”\r<br>你的任务就是通过看加密的字符串而得出加密前的字符串排序后的第一行,为了简化问题，给出的字符串只包含0或1，给你一个有n个字符的串，请你破译其真正的字符....</p> \n\n \n # 输入格式 \n<p>\n第一行有一个整数 N 表示字符串的长度\r<br>第二行有N个整数，表示最后一列从上到下的数值</p> \n\n \n # 输出格式 \n<p>\n输出文件中包含一行，为解密后的字符串；</p> \n\n \n # 提示 \n<p>\n【样例解释】\r<br>\r<br>10001->00011->00110->01100->11000\r<br>排序：\r<br>00011\r<br>00110\r<br>01100\r<br>10001\r<br>11000 \r<br>加密后是10010 所以输出 00011\r<br>【数据规模】\r<br>  对于30%数据字符串的长度不超过50；\r<br>\t对于60%的数据字符串的长度不超过100；\r<br>  对于100%的数据字符串的长度不超过3000。\r<br></p> "},{"title":"# 样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>5\r\n10010\r\n</td><td>00011</td></tr></table>\n\n"}]}