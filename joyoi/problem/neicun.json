{"title":"整理内存","time_limit":1000,"memory_limit":0,"url":"http://www.joyoi.cn/problem/neicun","statement":[{"title":"题目描述","format":"markdown","require":["katex"],"content":"每新开一个应用程序时，总要占用一定的内存，如何给这个程序在内存中分配位置呢？一种方法就是：从前往后找，找到第一块放得下的可用空间，就把它安排在这里。并把这一片空间标记为不可用。应用程序退出时，就把那一块空间再标为可用。这样反复多次后，内存中就会出现很多小块的可用空间，但太小了，无法利用。这样就造成了浪费，并且有时总的可用空间是够用的，但都分散了，导致内存不足。这时就需要进行内存整理。所谓内存整理，就是把内存中所有的程序全部向前移动，使它们全部“紧紧贴在一块儿”。例如，在0到10被占用，20到30被占用，其余空间空闲时，进行整理内存，结果是0到20被占用，其余空闲。现在已知总内存量，以及应用程序的开始结束情况和它们占用的内存分别是多少。求如果按照上面的方案分配内存的话，需要多少次内存整理。内存量统一以M为单位。"},{"title":"输入输出格式","format":"markdown","require":["katex"],"content":"## 输入格式：\n第一行是内存总量T，和一个正整数n，表示共进行n次打开或关闭应用程序的操作。(0< T<=10000.0,1<=n<=1000)\n以下n行，每行描述了一个操作。\n每行第一个数是这个应用程序的编号D,(1<=D<=1000)\n如果这个编号是第一次出现，那么这行后面还有一个实数F，\n表示这个程序的内存占用量。(0< F<=10000.0)\n如果这个编号是第二次出现，那么此行结束，表示这个编号的程序退出了。\n## 输出格式：\n共一行，共需整理内存的次数。如果内存整理了还不够用，则输出\"Impossible\"。（引号不需要输出）\n\n## 对下面的样例的说明\n首先，编号为1的程序占用了0--30的空间，编号为2的程序占用了30--80的空间。\n然后1退出，这时的空闲空间有：0--30,80--100。\n无论哪一片都放不下3,所以进行一次内存整理，这时2被移到0--50,3正好放在50--100# 样例数据\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>100 4\n1 30\n2 50\n1\n3 50</td><td>1</td></tr></table>\n\n"}]}