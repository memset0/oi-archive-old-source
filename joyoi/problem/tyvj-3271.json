{"title":"国际象棋","time_limit":10000,"memory_limit":126,"url":"http://www.joyoi.cn/problem/tyvj-3271","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>\n国际象棋（King）\r<br>【题目描述】\r<br>　　近来， Hewr 为了打发时间，开始重操旧业 —— 国际象棋。\r<br>　　Hewr 听说国际象棋中有一种叫做国王的东东，它能攻击的范围是八个方向与它相邻的格子。一个国王，它能攻击的范围就是它 周围 8 个方向 的相邻格子。\r<br>　　Task ：给出一个 n*n （ 1 ≤ n ≤ 7 ）的棋盘，然后让你在棋盘中放置 M （ 1 ≤ M ≤((n+1)/2)^2 ）个国王，使得他们 不能互相攻击 。问你有多少种不同的 方案 。由于方案数过多，所以你只要输出方案数 mod 123456788 。\r<br>　　Er ，如果你要问这个问题和研究国际象棋有什么关系，其实我可以告诉你：没任何的关系 ……</p> \n\n \n # 输入格式 \n<p>\n　　仅有一行两个整数 n ， M 。</p> \n\n \n # 输出格式 \n<p>\n　　仅有一行一个整数，表示方案数 mod 123456788 之后得到的数。</p> \n\n \n # 提示 \n<p>\n　　【数据规模】\r<br>　　对于 100% 的数据， 1 ≤ n ≤ 7 ， 1 ≤ M ≤ 8 ；\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>解题报告：国际象棋\r<br>【正解】\r<br>　　相信熟悉动态规划的同学一眼就看出这是一道状态压缩 DP 。原题数据 N ≤ 10 。当时我想不加任何优化的状态压缩 DP 大概也能过掉这个题。但是，为了迎合这套题的主题，我就把数据范围稍微扩大了一点，已经足够强大使得不加优化的 DP 无法 AC 。\r<br>　　这个题的状态方程： f[i,j,k] 表示前 i 行，放 j 个国王，而且第 i 行国王的状态为 j　的时候一共有多少种不同的方案。\r<br>　　显然： f[i,j,k]:=sigma(f[i-1,j-num[k],x]) 。 Num[k] 表示 k 的二进制有多少个 1 ， 也就是 k 表示放了多少个国王。如果直接枚举的话，时间复杂度是 O （ n*m*2^n*2^n*n ），状态比较吓人，估计这样做的话， 30% 的数据大概可以吧。下面说一下这个题我想到的优化：\r<br>　　1、用搜索得到一行中可行的状态。时间复杂度为 O （ 2^n ）；\r<br>　　2、枚举这两个表中任意两个状态，判断他们是否有冲突，如果没有冲突，就令g[i,j]=g[j,i]=true ，表示他们可以放在同一行。当然，在存储的时候是用链表。\r<br>　　3、巧用 and 运算快速判断两个状态是否冲突。怎么判断？对于两个状态 i 和 j 。\r<br>　　　　（1） 、 i and j=0 表明 i 和 j 在同一个位置上不同时存在国王。\r<br>　　　　（2） 、 i and (j shl 1) 将 j 位移，相当于判断 45 ° 方向上 i 和 j 不同时存在国王。\r<br>　　　　（3） 、 j and (i shl 1) 与 2 类似。\r<br>　　符合以上三个条件，就说明 i 和 j 这两个状态不会发生冲突，也就是可以相互转移。我觉得加上面 3 个优化中其中一个的话，大概可以过 40~60% 的点。加上三个后的话，轻松就可以过掉所有的数据了。\r<br>\r<br>【笔者的话】\r<br>　　其实，为什么我们可以想到以上的 3 个优化呢，思路可以归纳如下：\r<br>　　　1 、 因为国王可以左右攻击，所以对于每一行的可行状态数是很少的，预处理出来就可以节省很多的状态数。\r<br>　　　2 、 但是，判断是否冲突的时候如果用 O （ n ）的时间复杂度，估计程序又要挂掉了， 所以再想一下就可以想到用二进制的运算判断状态是否冲突了。\r<br>　　　3 、 最基本的一点，为什么会想到用二进制来压缩状态呢？就是因为数据太小了 ~\r<br>【小结】\r<br>　　这个题模型比较容易想到，但拿满分却不容易，考察对动态规划的优化.........还有代码 量好像也不小，不过考虑到这套题其他的题目也差不多，所以就没关系啦 ~\r<br>　　期望平均分大概在 35 分左右。</p> "},{"title":"# 样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>3 2</td><td>16</td></tr></table>\n\n"}]}