{"title":"栈函数","time_limit":1000,"memory_limit":128,"url":"http://www.joyoi.cn/problem/tyvj-3736","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>&nbsp;&nbsp;&nbsp;&nbsp;Livid&nbsp;最近发现了一个神奇的机器，这个机器的所有操作都是通过维护一个栈来完成的，它支持如下几个操作：</p>\r\n\r\n<p>NUM&nbsp;X：把X这个元素放置栈顶。<br />\r\nPOP&nbsp;X：抛弃栈顶元素。<br />\r\nINV：将栈顶元素取出，然后放入它的相反数。<br />\r\nDUP：再放入一个和栈顶元素相同的数。<br />\r\nSWP：交还栈顶的两个元素。<br />\r\nADD：将栈顶的两个元素相加然后放入栈内。<br />\r\nSUB：取出栈顶的两个元素，第二个元素减去第一个元素，所得结果放入栈内。<br />\r\nMUL：将栈顶的两个元素相乘然后放入栈内。<br />\r\nDIV：取出栈顶的两个元素，第二个元素整除以第一个元素，所得结果放入栈内。<br />\r\nMOD：取出栈顶的两个元素，第二个元素取模以第一个元素，所得结果放入栈内。<br />\r\nEND：结束这个程序。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;然后，Livid&nbsp;用上面的11种操作写了一个一元函数f(x)。x就是放入栈里面第一个初始元素。然后经过这个函数的一系列操作，当函数结束的时候，正常情况下，栈里面会有唯一的一个元素。剩下的这个元素就作为函数f(x)的返回值。</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Livid&nbsp;有N个询问，询问每个值x经过上述函数所映射出的f(x)是多少。但是这个由于机器太老了，跑起东西来太慢了T_T，&nbsp;Livid&nbsp;又是一个急性子（你们懂。。）所以请你们写一个程序，来帮助&nbsp;Livid&nbsp;计算他查询的f(x)^_^。</p> \n\n \n # 输入格式 \n<p>输入若干行。</p>\r\n\r\n<p>仅包含上述11个操作，用来描述函数f(x)的操作，函数的结束保证以END结尾。</p>\r\n\r\n<p>接下来一个整数N。</p>\r\n\r\n<p>下面N行每行一个数字ai，代表栈里面的初始元素。</p>\r\n\r\n<p>输入数据不保证合法（我很没有节操~</p> \n\n \n # 输出格式 \n<p>如果最后栈内是一个元素，输出这个元素，否则输出ERROR!</p>\r\n\r\n<p>还有，由于这台机器太破了，所以如果运算过程中有数字的绝对值大于1e9机器也会ERROR!</p>\r\n\r\n<p>如果输入数据不合法，导致中途退出，输出ERROR!</p> \n\n \n # 提示 \n<p>仔细考虑不合法的情况，避免不必要的RE和WA。</p>\r\n\r\n<p>函数操作步数&lt;=2000</p>\r\n\r\n<p>询问数&lt;=2000</p> "},{"title":"样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>NUM 600000000\r\nADD\r\nEND\r\n3\r\n0\r\n600000000\r\n1</td><td>600000000\r\nERROR\r\n600000001</td></tr></table>\n\n"}]}