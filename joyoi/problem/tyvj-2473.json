{"title":"Eating Together麻烦的聚餐","time_limit":1000,"memory_limit":64,"url":"http://www.joyoi.cn/problem/tyvj-2473","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>\n为了避免餐厅过分拥挤，FJ要求奶牛们分3批就餐。每天晚饭前，奶牛们都会在餐厅前排队入内，按FJ的设想\r<br>所有第3批就餐的奶牛排在队尾，队伍的前端由设定为第1批就餐的奶牛占据，中间的位置就归第2批就餐的奶牛了。\r<br>由于奶牛们不理解FJ的安排，晚饭前的排队成了一个大麻烦。 \r<br>\r<br>第i头奶牛有一张标明她用餐批次D_i(1 <= D_i <= 3)的卡片。虽然所有N(1 <= N <= 30,000)头奶牛排成了很整齐的队伍\r<br>但谁都看得出来，卡片上的号码是完全杂乱无章的。 \r<br>\r<br>在若干次混乱的重新排队后，FJ找到了一种简单些的方法：奶牛们不动，他沿着队伍从头到尾走一遍\r<br>把那些他认为排错队的奶牛卡片上的编号改掉，最终得到一个他想要的每个组中的奶牛都站在一起的队列，例如111222333或者333222111。哦，你也发现了，FJ不反对一条前后颠倒的队列，那样他可以让所有奶牛向后转，然后按正常顺序进入餐厅。 \r<br>\r<br>你也晓得，FJ是个很懒的人。他想知道，如果他想达到目的，那么他最少得改多少头奶牛卡片上的编号。\r<br>所有奶牛在FJ改卡片编号的时候，都不会挪位置。 \r<br>\r<br></p> \n\n \n # 输入格式 \n<p>\n第1行: 1个整数：N \r<br>第2..N+1行: 第i+1行是1个整数，为第i头奶牛的用餐批次D_i \r<br></p> \n\n \n # 输出格式 \n<p>\n第1行: 输出1个整数，为FJ最少要改几头奶牛卡片上的编号，才能让编号变成他设想中的样子 \r<br></p> "},{"title":"样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>5\r\n1\r\n3\r\n2\r\n1\r\n1\r\n输入说明: \r\n\r\n队列中共有5头奶牛，第1头以及最后2头奶牛被设定为第一批用餐，第2头奶牛的预设是第三批用餐，第3头则为第二批用餐。 \r\n\r\n</td><td>1\r\n\r\n输出说明: \r\n\r\n如果FJ想把当前队列改成一个不下降序列，他至少要改2头奶牛的编号，一种可行的方案是：把队伍中2头编号不是1的奶牛的编号都改成1。不过，如果FJ选择把第1头奶牛的编号改成3就能把奶牛们的队伍改造成一个合法的不上升序列了。 \r\n\r</td></tr></table>\n\n"}]}