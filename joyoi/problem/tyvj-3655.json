{"title":"操作系统","time_limit":1000,"memory_limit":161,"url":"http://www.joyoi.cn/problem/tyvj-3655","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>\n写一个程序来模拟操作系统的进程调度。假设该系统只有一个CPU，每一个进程的到达时间，执行时间和运行优先级都是已知的。其中运行优先级用自然数表示，数字越大，则优先级越高。\r<br>如果一个进程到达的时候CPU是空闲的，则它会一直占用CPU直到该进程结束。除非在这个过程中，有一个比它优先级高的进程要运行。在这种情况下，这个新的（优先级更高的）进程会占用CPU，而老的只有等待。\r<br>如果一个进程到达时，CPU正在处理一个比它优先级高或优先级相同的进程，则这个（新到达的）进程必须等待。\r<br>一旦CPU空闲，如果此时有进程在等待，则选择优先级最高的先运行。如果有多个优先级最高的进程，则选择到达时间最早的。\r<br></p> \n\n \n # 输入格式 \n<p>\n输入文件包含若干行，每一行有四个自然数（均不超过108），分别是进程号，到达时间，执行时间和优先级。不同进程有不同的编号，不会有两个相同优先级的进程同时到达。输入数据已经按到达时间从小到大排序。输入数据保证在任何时候，等待队列中的进程不超过15000个。</p> \n\n \n # 输出格式 \n<p>\n按照进程结束的时间输出每个进程的进程号和结束时间</p> "},{"title":"样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td>1 1 5 3\r\n2 10 5 1\r\n3 12 7 2\r\n4 20 2 3\r\n5 21 9 4\r\n6 22 2 4\r\n7 23 5 2\r\n8 24 2 4</td><td>\n1 6\r\n3 19\r\n5 30\r\n6 32\r\n8 34\r\n4 35\r\n7 40\r\n2 42</td></tr></table>\n\n"}]}