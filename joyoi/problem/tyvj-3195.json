{"title":"（理论基础）","time_limit":10000,"memory_limit":64,"url":"http://www.joyoi.cn/problem/tyvj-3195","statement":[{"title":"","format":"markdown","require":["katex"],"content":"\n# \n\n \n # 题目描述 \n<p>\n1、基本概念\r<br>　　在实际生活中有许多流量问题，例如在交通运输网络中的人流、车流、货物流，供水网络中的水流，金融系统中的现金流，通讯系统中的信息流，等等。50年代以福特(Ford)、富克逊(Fulkerson)为代表建立的“网络流理论”，是网络应用的重要组成部分。如图1所示是联结某产品地v1和销售地v4的交通网，每一边(vi,vj)代表从vi到vj的运输线，产品经这条边由vi输送到vj，弧旁的数表示这条运输线的最大通过能力。产品经过交通网从v1到v4。现在要求制定一个运输方案使从v1到v4的产品数量最多。\r<br><br><center><img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC8xYS5ibXA=.bmp\"></img></center>　\r<br>\r<br>2、网络与网络流 \r<br>　　给出一个有向图G=(V，E)，其中V表示图G中顶点的结合，其中E表示图G中边的结合。在V中指定一点，称为源点(记为s)，和另一点，称为汇点(记为t)，其余的点叫中间点，对于E中每条边(u,v)都对应一个正整数c(u,v)≥O，称为边(u,v)的容量，则赋权有向图G=(V,E,C,s,t)称为一个网络。如图1所给出的一个赋权有向图G就是一个网络，指定v1是源点，v4为汇点，弧旁的数字为c(u,v)。所谓网络上的流，是指定义在边集合E上一个函数f={f(u,v),u,v属于点集合V}，并称f(u,v)为边(u,v)上的流量。如图2所示的网络G，弧上两个数，第一个数表示容量c(u,v)，第二个数表示流量f(u,v)。\r<br><br><center><img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC8xYi5ibXA=.bmp\"></img></center>　\r<br>　　网络流理论中，用到的数学符号及定义总结：\r<br>　　　　V表示整个图中的所有结点的集合。\r<br>　　　　E表示整个图中所有边的集合。\r<br>　　　　G = (V,E) ,表示整个图。\r<br>　　　　s表示网络的源点,t表示网络的汇点。\r<br>　　　　对于每条边(u,v),有一个容量c(u,v)，(其中c(u,v)>=0)。\r<br>　　　　如果c(u,v)=0，则表示(u,v)不存在在网络中。\r<br>　　　　如果原网络中不存在边(u,v)，则令c(u,v)=0。\r<br>　　　　对于每条边(u,v),有一个流量f(u,v)。\r<br><br><center><img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC8yLmJtcA==.bmp\"></img></center>　\r<br>\r<br>　　一个简单的例子，网络可以被想象成一些输水的管道，括号内右边的数字表示管道的容量，左边的数字表示这条管道的当前流量。\r<br>(1)容量限制:  f[u,v]<=c[u,v]\r<br>(2)反对称性： f[u,v] = - f[v,u]\r<br>(3)流量平衡:  对于不是源点也不是汇点的任意结点，流入该结点的流量和等于流出该结点的流量和。\r<br>　　结合反对称性,流量平衡也可以写成:<img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC8zLmJtcA==.bmp\">\r<br>　　只要满足这三个性质，就是一个合法的网络流。\r<br>\r<br>3、可行流与最大流\r<br>　　在运输网络的实际问题中，我们可以看出，对于流有两个显然的要求：一是每个弧上的流量不能超过该弧的最大通过能力(即弧的容量)；二是中间点的流量为0，源点的净流出量和汇点的净流入量必相等且为这个方案的总输送量。因此有：\r<br>    (1)容量约束：0≤f(u,v)≤c(u,v)，(u,v)∈E，\r<br>    (2)守恒条件：对于中间点：流入量=流出量；对于源点与汇点：源点的净流出量Vs(f)=汇点的净流入量（-Vt(f)），则称流f为网络G上的可行流，并将源点s的净流量称为图G的可行流f，网络G中可行流中值最大的流f*称为G的最大流。\r<br>\r<br>最大流问题\r<br>　　定义一个网络的流量（记为|f|）=<img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC80LmJtcA==.bmp\">\r<br>\r<br>　　最大流问题，就是求在满足网络流性质的情况下，|f|的最大值。\r<br>\r<br>\r<br>残量网络\r<br>\r<br>　　为了更方便算法的实现，一般根据原网络定义一个残量网络。其中r(u,v)为残量网络的容量。\r<br>　　　　r(u,v) = c(u,v) – f(u,v)\r<br>　　通俗地讲：就是对于某一条边（也称弧），还能再有多少流量经过。Gf残量网络,Ef表示残量网络的边集。\r<br><br><center><img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC81LmJtcA==.bmp\"></img>　　　<img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC82LmJtcA==.bmp\"></img></center>　\r<br>　　图中边的数值(a,b)表示(流量f,容量c)\r<br>　　残量网络（如果网络中一条边的容量为0,则认为这条边不在残量网络中。r(s,v1)=0,所以就不画出来了。\r<br>　　另外举个例子：r(v1,s) = c(v1,s) – f(v1,s) = 0 – (-f(s,v1)) = f(s,v1) = 4.\r<br>\r<br><br><center><img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC83LmJtcA==.bmp\"></img></center>　\r<br>　　从残量网络中可以清楚地看到：\r<br>　　　　因为存在边(s,v2) = 3,我们知道从S到v2还可以再增加2单位的流量；\r<br>　　　　因为存在边(v1,t) = 2,我们知道从v1到t还可以再增加2单位的流量。\r<br>\r<br>后向弧\r<br><br><center><img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC84LmJtcA==.bmp\"></img></center>　\r<br>　　其中像(v1,s)这样的边称为后向弧,它表示从v1到s还可以增加4单位的流量。\r<br>　　但是从v1到s不是和原网络中的弧的方向相反吗？显然“从v1到s还可以增加4单位流量”这条信息毫无意义。那么，有必要建立这些后向弧吗？\r<br>\r<br>\r<br>为什么要建立后向弧\r<br>　　显然，例1中的画出来的不是一个最大流。但是，如果我们把s -> v2 -> v1 -> t这条路径经过的弧的流量都增加2,就得到了该网络的最大流。注意到这条路径经过了一条后向弧:(v2,v1)。如果不设立后向弧，算法就不能发现这条路径。\r<br>　　从本质上说，后向弧为算法纠正自己所犯的错误提供了可能性，它允许算法取消先前的错误的行为（让2单位的流从v1流到v2)\r<br>\r<br>　　当然,可以把上面说的情况当成特殊情况来处理。但使用后向弧可以使编程简单许多.\r<br>　　注意,后向弧只是概念上的,在程序中后向弧与前向弧并无区别.\r<br>\r<br>\r<br>增广路\r<br><br><center><img src=\"/source/joyoi/tyvj-3195/img/aHR0cDovL3d3dy5qb3lvaS5jbi9wcm9ibGVtL3R5dmotMzE5NS9wcm9ibGVtc19pbWFnZXMvMTYwMC85LmJtcA==.bmp\"></img></center>　\r<br>　　增广路定义：在残量网络中的一条从s通往t的路径，其中任意一条弧(u,v)，都有r[u,v]>0。绿色的即为一条增广路。\r<br>\r<br>\r<br>增广路算法\r<br>　　增广路算法：每次用BFS找一条最短的增广路径，然后沿着这条路径修改流量值（实际修改的是残量网络的边权）。当没有增广路时，算法停止，此时的流就是最大流。\r<br>\r<br>　　证明增广路算法的正确性（略，请查阅相关网络流算法资料）。\r<br>\r<br>最大流最小割定理\r<br>　　网络流中这三个条件等价（在同一个时刻）:\r<br>　　　　1、f是最大流\r<br>　　　　2、残量网络中找不到增广路径\r<br>　　　　3、|f| = c(S,T)\r<br>\r<br>割的定义\r<br>　　一个割(S,T)由两个点集S,T组成。\r<br>　　　S+T=V\r<br>　　　s属于S\r<br>　　　t属于T\r<br>\r<br>　　结论：任意割的流量等于整个网络的流量。\r<br>\r<br>求解最大流的算法很多，总体上分成两类：\r<br>（1）基于增广路的算法\r<br>1、Ford-Fulkerson \r<br>　　Ford-Fulkerson提出的是一种基于增广路求解网络最大流的理论思想，是其他基于增广路求解网络最大流算法的理论基础。\r<br>2、Edmonds-Karp \r<br>　　用bfs寻找增广路,乐观的时间复杂度为O(VE)，悲观的时间复杂度是O(VE^2)。\r<br>3、Dinic \r<br>　　最大流的优化算法之一，每一步对原图进行分层，然后用dfs求增广路，时间复杂度是O(V^2E)。\r<br>4、Shortest Augmenting Paths(SAP算法，目前很流行) \r<br>　　寻找最短的增广路,把EK算法的O(E)时间优化到了O(V),故复杂度为O(V^2E)，虽同为O(V^2E)级别效率，但加了间隙优化后效率优于Dinic算法。 \r<br>\r<br>（2）基于预流推进的算法\r<br>1、Push_Relabel \r<br>　　很朴实的预留推进算法，O(V^4)。\r<br>2、Relabel_to_Front \r<br>　　用一个List维护各个点，当一个点被relabel后回到List首部(to front)再往后计算，O(V^3)。\r<br>3、Highest_Relabel(传说中的HLPP算法?! –Highest_Label_Preflow_Push，O(V^2*E^(1/2)) \r<br>　　Relabel_to_Front的改进版,List分层从最高的点开始流,并且加上bfs预处理和间隙优化后效率会有不可思议的提高。\r<br>\r<br>\r<br>\r<br>\r<br>\r<br>4、可增广路径\r<br>　　所谓可增广路径，是指这条路径上的流可以修改，通过修改，使得整个网络的流值增大。设f是一个可行流，P是从源点s到汇点t的一条路，若p满足下列条件：\r<br>    (1)在p上的所有前向弧(vi→vj)都是非饱和弧，即0≤fij<cij \r<br>    (2)在p上的所有后向弧(vi←vj)都是非零弧，即0<fji≤cji\r<br>　　则称p为(关于可行流f的)一条可增广路径。\r<br>5、最大流定理\r<br>　　当且仅当不存在关于f*的增广路径，可行流f*为最大流。\r<br></p> \n\n \n # 输入格式 \n<p>\n</p> \n\n \n # 输出格式 \n<p>\n</p> "},{"title":"样例数据","format":"markdown","require":["katex"],"content":"<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>输入样例</td>\n\t\t<td>输出样例</td>\n\t</tr>\n<tr><td></td><td></td></tr></table>\n\n"}]}