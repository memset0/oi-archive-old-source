{"title":"JAVABEAN代码","time_limit":1000,"memory_limit":125,"url":"http://www.joyoi.cn/problem/codevs-2522","statement":[{"title":"","format":"html_final","require":["katex"],"content":"\n<div class=\"panel panel-default\">\n<div class=\"area-title\">\n<span>\n题目描述\n<small>Description</small>\n</span></div>\n<div class=\"panel-body\">\n\n<p>【问题描述】</p>\n<p>代码自动生成器已经应用到各个领域，有根据界面生成代码的（C#，delphi），有根据wsdl生成代码的(axis) 。现在需要你做一个基于数据表的代码生成器，输入一个数据表和对应的字段、字段类型信息，生成固定格式的JAVA BEAN代码。</p>\n<p>【数据表】</p>\n<p>数据表的命名是由大写字母、数字、下划线组成的大写字母开头的长度小于30位的字符串，如 TB_SAMP_MACHINE ，SYSTEM_ID ，TEST2。</p>\n<p>在java bean种，数据表的表名映射到java的类名，映射规则如下：</p>\n<p>首字母大写，所有\"_\"符号删除，所有\"_\"后面的第一个字如果是字母则大写，其他字母小写，然后后面添加字符串“Bean”作为类名。</p>\n<p> </p>\n<p>       【字段】</p>\n<p>一个数据表包含一个以上的字段，字段的信息包括字段名和字段类型。</p>\n<p>字段命的命名规则和数据表相同。</p>\n<p>在java bean种，字段名映射到java的类成员变量，映射规则如下：</p>\n<p>首字母小写，所有\"_\"符号删除，所有\"_\"后面的第一个字如果是字母则大写，其他字母小写：</p>\n<p>如果第二个字是大写字母，则把第二个字母改成小写。</p>\n<p>字段类型为：</p>\n<p>NUMBER   对应java的 long类型</p>\n<p>VARCHAR2 对应java的 String类型</p>\n<p>DATE      对应java的 Date类型</p>\n<p>【GETTER/SETTER】</p>\n<p>JAVA BEAN种每一个类成员变量都包含一个 GETTER方法和SETTER方法</p>\n<p>对于GETTER方法，其方法名为 get+变量名(首字母大写) ；</p>\n<p>对于 SETTER方法，其方法名为 get+变量名(首字母大写) ，带一个参数，参数类型和参数名就是对应变量的类型和变量名，例如：对于long类型的变量名为 actionId 的类成员变量，其GETTER/SETTER方法如下：</p>\n<p>public long getActionId() {</p>\n<p>     return this.actionId;</p>\n<p>}</p>\n<p> </p>\n<p>public void setActionId(long actionId) {</p>\n<p>     this.actionId=actionId;</p>\n<p>}</p>\n<p> </p>\n<p>【代码格式】</p>\n<p>代码格式必须严格按照如下模板输出，不允许增删改任何字符（包括空格、回车、制表符等等）</p>\n<p> </p>\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"432\">\n<p><strong>package</strong> com.gzio.match;</p>\n<p> </p>\n<p><strong>import</strong> java.util.Date;</p>\n<p><strong> </strong></p>\n<p><strong>public</strong> <strong>class</strong> 类名 <strong>implements</strong> java.io.Serializable</p>\n<p>{</p>\n<p>    <strong>private</strong> 类型 变量名;  (多个)</p>\n<p> </p>\n<p>    <strong>public </strong>类名() {</p>\n<p>    }</p>\n<p> </p>\n<p>    对于所有的每一个变量提供 GETTER/SETTER方法，格式如下：</p>\n<p>    <strong>public</strong> 类型 GETTER方法() {</p>\n<p>        <strong>return</strong> 变量名;</p>\n<p>    }</p>\n<p> </p>\n<p>    <strong>public</strong> <strong>void</strong> SETTER方法(类型 变量名) {</p>\n<p>        <strong>this</strong>.变量名 = 变量名;</p>\n<p>    }</p>\n<p> </p>\n<p>}</p>\n<p> </p>\n</td>\n</tr>\n</tbody>\n</table>\n\n</div>\n</div>\n\n<div class=\"panel panel-default\">\n<div class=\"area-title\">\n<span>\n输入描述\n<small>Input Description</small>\n</span></div>\n<div class=\"panel-body\">\n<p>表名 table</p>\n<p> 字段数目n, n∈[1,20]</p>\n<p> 以下n行代表 字段名 字段类型  ，用空格隔开</p>\n\n</div>\n</div>\n<div  class=\"panel panel-default\">\n<div class=\"area-title\">\n<span>\n输出描述\n<small>Output Description</small>\n</span></div>\n<div class=\"panel-body\">\n\n<p>完全符合上述格式的JAVA程序文件 。</p>\n\n</div>\n</div>\n\n\n<div class=\"panel panel-default\">\n<div class=\"area-title\">\n<span>\n样例输入\n<small>Sample Input</small>\n</span></div>\n<div class=\"panel-body\">\n<p>ACTION</p>\n<p> 3</p>\n<p> IF_ACTION_ID   NUMBER</p>\n<p> IF_ACTION_CODE VARCHAR2</p>\n<p> CREATE_DATE DATE</p>\n\n</div>\n</div>\n\n<div class=\"panel panel-default\">\n<div class=\"area-title\">\n<span>\n样例输出\n<small>Sample Output</small>\n</span></div>\n<div class=\"panel-body\">\n<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"432\">\n<p>package com.gzio.match;</p>\n<p> </p>\n<p>import java.util.Date;</p>\n<p> </p>\n<p>public class ActionBean implements java.io.Serializable</p>\n<p>{</p>\n<p>       private long ifActionId;</p>\n<p>       private String ifActionCode;</p>\n<p>       private Date createDate;</p>\n<p> </p>\n<p>       public ActionBean() {</p>\n<p>       }</p>\n<p> </p>\n<p>       public long getIfActionId() {</p>\n<p>              return ifActionId;</p>\n<p>       }</p>\n<p> </p>\n<p>       public void setIfActionId(long ifActionId) {</p>\n<p>              this.ifActionId = ifActionId;</p>\n<p>       }</p>\n<p> </p>\n<p>       public long getIfActionCode() {</p>\n<p>              return ifActionCode;</p>\n<p>       }</p>\n<p> </p>\n<p>       public void setIfActionCode(String ifActionCode) {</p>\n<p>              this.ifActionCode = ifActionCode;</p>\n<p>       }</p>\n<p> </p>\n<p>       public long getCreateDate() {</p>\n<p>              return createDate;</p>\n<p>       }</p>\n<p> </p>\n<p>       public void setCreateDate(Date createDate) {</p>\n<p>              this.createDate = createDate;</p>\n<p>       }</p>\n<p> </p>\n<p>}</p>\n<p> </p>\n</td>\n</tr>\n</tbody>\n</table>\n\n</div>\n</div>\n\n<div class=\"panel panel-default\">\n<div class=\"area-title\">\n<span>\n数据范围及提示\n<small>Data Size & Hint</small>\n</span></div>\n<div class=\"panel-body\">\n<p>格式说明：</p>\n<p>1、  每一行代码最右面没有空格、制表符号。</p>\n<p>2、  所见的空行没有空格、制表符号。</p>\n<p>3、  每一行代码最左边没有空格，类中的变量、方法使用制表符号对齐。</p>\n<p>4、  GETTER方法和SETTER方法内部的代码左边用两个制表符对齐。</p>\n<p>5、  package , import , public class 开头的语句以及 class 对应的 { , } 括号向左顶格。</p>\n<p>6、  方法名和左括号“(”之间没有空格，其他的见到有空格的部分只有一个空格。（比如 “public”和“void”, “SETTER方法(类型”和“变量名)”， “)”和“{”，“return”和变量名，“this.变量名”和“=”和“变量名;”之间也有一个空格隔开）。</p>\n<p>7、  每个方法以”}”结束，下一个方法在上一个方法的”}”空一行之后编写。</p>\n<p>8、  类定义结束的 } 后面有一个空行，然后文件结束</p>\n</div>\n</div>\n"}]}