{"title":"机器翻译","time_limit":1000,"memory_limit":128,"url":"http://www.tsinsen.com/A1182","statement":[{"title":"","format":"html","require":["katex"],"content":"\n<div id=\"pcont1\" style=\"margin-top:20px; display:block;\">\n"},{"title":"# 问题描述","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　小晨的电脑上安装了一个机器翻译软件，他经常用这个软件来翻译英语文章。   这个翻译软件的原理很简单，它只是从头到尾，依次将每个英文单词用对应的中文含义来替换。对于每个英文单词，软件会先在内存中查找这个单词的中文含义，如果内存中有，软件就会用它进行翻译；如果内存中没有，软件就会在外存中的词典内查找，查出单词的中文含义然后翻译，并将这个单词和译义放入内存，以备后续的查找和翻译。   假设内存中有M 个单元，每单元能存放一个单词和译义。每当软件将一个新单词存入内存前，如果当前内存中已存入的单词数不超过M−1，软件会将新单词存入一个未使用的内存单元；若内存中已存入M 个单词，软件会清空最早进入内存的那个单词，腾出单元来， 存放新单词。   假设一篇英语文章的长度为N 个单词。给定这篇待译文章，翻译软件需要去外存查找多少次词典？假设在翻译开始前，内存中没有任何单词。</div>"},{"title":"# 输入格式","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　输入共2 行。每行中两个数之间用一个空格隔开。<br/>\n　　第一行为两个正整数M 和N，代表内存容量和文章的长度。<br/>\n　　第二行为N 个非负整数，按照文章的顺序，每个数（大小不超过1000）代表一个英文单词。文章中两个单词是同一个单词，当且仅当它们对应的非负整数相同。</div>"},{"title":"# 输出格式","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　输出共1 行，包含一个整数，为软件需要查词典的次数。</div>"},{"title":"# 样例输入","format":"html","require":["katex"],"content":"\n<div class=\"pddata\">Sample Input 1:<br/>\n3 7<br/>\n1 2 1 5 4 4 1<br/>\nSample Input 2:<br/>\n2 10<br/>\n8 824 11 78 11 78 11 78 8 264</div>"},{"title":"# 样例输出","format":"html","require":["katex"],"content":"\n<div class=\"pddata\">Sample Output 1:<br/>\n5<br/>\nSample Output 2:<br/>\n6</div>"},{"title":"# 输入输出样例 1 说明","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　整个查字典过程如下：每行表示一个单词的翻译，冒号前为本次翻译后的内存状况：<br/>\n　　空：内存初始状态为空。<br/>\n　　1． 1：查找单词1 并调入内存。<br/>\n　　2． 1 2：查找单词2 并调入内存。<br/>\n　　3． 1 2：在内存中找到单词1。<br/>\n　　4． 1 2 5：查找单词5 并调入内存。<br/>\n　　5． 2 5 4：查找单词4 并调入内存替代单词1。<br/>\n　　6． 2 5 4：在内存中找到单词4。<br/>\n　　7． 5 4 1：查找单词1 并调入内存替代单词2。<br/>\n　　共计查了5 次词典。</div>"},{"title":"# 数据规模和约定","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　对于10%的数据有M=1，N≤ 5。<br/>\n　　对于100%的数据有0</div>\n\n</div>\n"}]}