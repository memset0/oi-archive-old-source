{"title":"Divisibility Rules","time_limit":1000,"memory_limit":256,"url":"http://www.tsinsen.com/A1459","statement":[{"title":"","format":"html","require":["katex"],"content":"\n<div id=\"pcont1\" style=\"margin-top:20px; display:block;\">\n"},{"title":"题意描述","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　Vasya在学校学习整除的规则。以下是其中的一部分。<br/>\n　　*  能被2整除的数的规则：一个数能被2整除当且仅当它的最后一位能被2整除，或者换句话说，是偶数。<br/>\n　　*  能被3整除的数的规则：一个数能被3整除当且仅当它的各个数位上的数字之和能被3整除。<br/>\n　　*  能被4整除的数的规则：一个数能被4整除当且仅当它的最后两位形成的数能被4整除。<br/>\n　　*  能被5整除的数的规则：一个数能被5整除当且仅当它的最后一位是5或0。<br/>\n　　*  能被6整除的数的规则：一个数能被6整除当且仅当它能同时被2和3整除（也就是说，当且仅当它的最后一位是偶数而且各个数位上的数字之和能被3整除）<br/>\n　　*  能被7整除的数的规则：Vasya不知道这个整除性质。<br/>\n　　*  能被8整除的数的规则：一个数能被8整除当且仅当它的最后三位形成的数能被8整除。<br/>\n　　*  能被9整除的数的规则：一个数能被9整除当且仅当它的各个数位上的数字之和能被9整除。<br/>\n　　*  能被10整除的数的规则：一个数能被10整除当且仅当它的最后一位是0。<br/>\n　　*  能被11整除的数的规则：一个数能被11整除当且仅当它的奇数位上的数字之和等于它的偶数位上的数字之和，或者它们相差一个能被11整除的数。<br/>\n　　Vasya很感兴趣的是，有些整除规则十分类似。事实上，去检查一个数能否被2,4,5,8,10整除的时候只需要检查它的最后一位或几位是否满足某个条件。Vasya把这种规则称为2类型规则(2-type)。<br/>\n　　如果检查一个数能否被给定的数整除意味着计算这个数的各个数位上的数字之和并判断这个和能否被给定的数整除，那么Vasya称这个规则为3类型规则（3-type）（因为它对3和9有效）<br/>\n　　如果我们需要求出一个数的奇数位上的数字之和与偶数位上的数字之和的差值去检查这个差值能否被给定数整除，那么这个规则被称为11类型规则（11-type）（它对11有效）。<br/>\n　　有些情况下我们应当把除数分解成一些因数然后检查是否满足一些不同类型的规则（2-type,3-type,11-type）。例如，对于除数6我们需要检查2-type和3-type规则，对于除数66我们检查所有的三种类型的规则。这样混合的整除规则被称为6类型规则(6-type)。<br/>\n　　最后，有些除数是所有类型的规则都无效的：既不是2-type，也不是3-type，也不是11-type，也不是6-type。这样的数最小的是7，所以我们称在这种情况下神秘的7类型规则(7-type)有效，也就是那种Vasya还没有发现的类型。<br/>\n　　Vasya的梦想是对所有可能的数求出整除规则。他将不仅仅停留在10进制下。由于有十分多的数字，他不能全都自己求。Vasya要求你去写一个程序求出在b进制下除数为d的整除规则类型。</div>"},{"title":"输入格式","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　第一行包含两个数b和d——进制数和除数。它们都在十进制下给出。</div>"},{"title":"输出格式","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　第一行输出在b进制下除数为d的整除规则类型：”2-type”，”3-type”，”11-type”，”6-type”，”7-type”（不含引号）之一。如果有几个类型同时满足，输出在上述序列中出现得较早的一个。如果一个数属于2-type，在第二行输出最少需要检查后几位(b进制位)。</div>"},{"title":"样例输入","format":"html","require":["katex"],"content":"\n<div class=\"pddata\">样例1：<br/>\n10 10<br/>\n样例2：<br/>\n2 3</div>"},{"title":"样例输出","format":"html","require":["katex"],"content":"\n<div class=\"pddata\">样例1：<br/>\n2-type<br/>\n1<br/>\n样例2：<br/>\n11-type</div>"},{"title":"样例说明","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　在二进制下能被3整除的数的特征如下：“一个数能被3整除当且仅当它在二进制下的奇数位的数字之和与偶数位上的数字之和相差的数能被3整除。”这是一个11-type的规则。例如，(21)10=(10101)2，它的奇数位上的数字之和为1+1+1=3，偶数位上的数字之和为0+0=0。这个规则有效，所以21能被3整除。<br/>\n　　另外，有些情况下一个数既符合3-type也符合11-type的规则。这种情况下正确的答案应该是”3-type”（不含引号）。</div>"},{"title":"数据规模和约定","format":"html","require":["katex"],"content":"\n<div class=\"pdcont\">　　2&lt;=b,d&lt;=100</div>\n\n</div>\n"}]}