{"title":"Battleships","time_limit":10000,"memory_limit":64,"url":"https://acm.uestc.edu.cn/problem/battleships/description","statement":[{"title":"Content","format":"markdown","require":["katex"],"content":"\nYou are all probably familiar with the pen and paper version of Battleships, but humor us while we\ndescribe it: Each puzzle consists of a $10$-by-$10$ grid of squares in which $10$ different  ships have been\nsecretly placed. One of these ships is $4$ grid squares long, two of them are $3$ grid squares long, three\nof them are $2$ grid squares long, and the remaining four ships are each $1$ grid square in length. No\ntwo ships can overlap and none can be adjacent to another, even diagonally. The only clues you have\nto the ship locations are a set of row and column sums printed on the left and bottom of the grid.\nEach row/column sum specifies how many grid squares in that row/column are occupied by ships. The\n\ffigures below show an example of a Battleships puzzle and its solution.\n\n<p class=\"text-center\">\n<img src=\"/source/lutece/battleships/img/aHR0cHM6Ly9hY20udWVzdGMuZWR1LmNuL21lZGlhL2ltYWdlL3Byb2JsZW0vbmV3LzIwMTQwNTEwMTc0NTQ5ODQzMjIucG5n.png\" alt=\"title\">\n<h5 class=\"text-center\">Figure $1$</h5>\n</p>\n\nWhen designing a Battleships puzzle, you must make sure that there is a unique solution for the given\nrow and column sums. Sometimes the sums on the sides are all that are needed to ensure a unique\nsolution (like the example above), but sometimes you must specify one or more squares in the grid in\norder to rule out all but one solution (as in the example below).\n\n<p class=\"text-center\">\n<img src=\"/source/lutece/battleships/img/aHR0cHM6Ly9hY20udWVzdGMuZWR1LmNuL21lZGlhL2ltYWdlL3Byb2JsZW0vbmV3LzIwMTQwNTEwMTc0NzM0ODIxMjMucG5n.png\" alt=\"title\">\n<h5 class=\"text-center\">Figure $2$</h5>\n</p>\n\nThese specified squares can be one of seven types: water, interior of a ship, left end of a horizontal ship,\ntop end of a vertical ship, right end of a horizontal ship, bottom end of a vertical ship, and $1$-square\nship. These are shown at the top of the next page. The characters beneath each square will be used for\nyour output. Note that the last character is an upper-case letter `O`, not a zero; also note that the `X`\nis upper-case but the `w` and `v` are lower-case.\n\n<p class=\"text-center\">\n<img src=\"/source/lutece/battleships/img/aHR0cHM6Ly9hY20udWVzdGMuZWR1LmNuL21lZGlhL2ltYWdlL3Byb2JsZW0vbmV3LzIwMTQwNTEwMTc0ODQ5Mzc1MjQucG5n.png\" alt=\"title\">\n<h5 class=\"text-center\">Figure $3$</h5>\n</p>\n\nYour job is the following: given a set of row and column sums, you are to find the minimum number of\nspecified squares needed to ensure that there is a unique solution. If this number is greater than $2$, you\nare to reject the puzzle as being too ambiguous.\n"},{"title":"Standard Input","format":"markdown","require":["katex"],"content":"\nThe input file will start with an integer $n$ indicating the number of test cases. Each test case consists\nof two lines, the first containing the ten row sums and the second containing the ten column sums.\n"},{"title":"Standard Output","format":"markdown","require":["katex"],"content":"\nFor each test case, output the case number followed by the total number of solutions possible for the\ngiven row and column sums (this number will never exceed $12,000$) followed by the minimum number of\nspecified squares needed to force a unique solution. If this number is greater than $2$, display the phrase\n\n`too ambiguous`\n\nOtherwise, output the location of the `best` square(s) that can be used to force a unique solution\nfollowed by the type of square to use, using the characters shown in Figure $3$. In the case of a single\nsquare, the `best` square is the square with the lowest row number, breaking any ties by choosing the\none with the lowest column number. After this, if there is a choice between the type of square to use,\nuse the lexicographically first one, where the lexicographic ordering is shown in Figure $3$, with `water`\nbeing the lexicographically first square type, followed by `interior of ship`, etc. In the case of two\nsquares, output the pair whose first square is the best among all first squares, breaking ties by choosing\nthe one with the best second square. All row and column numbers start at $1$.\n"},{"title":"Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>4\n8 1 0 7 0 0 4 0 0 0\n3 3 1 2 0 3 2 3 0 3\n0 3 3 4 1 2 1 2 2 2\n1 4 0 0 6 0 2 3 2 2\n1 2 1 2 5 0 1 2 1 5\n2 0 0 1 1 2 3 3 2 6\n0 4 1 0 4 0 4 4 0 3\n3 1 0 2 3 3 3 0 2 3</td><td>Case 1: 1 0\nCase 2: 993 2 (2,1)=< (6,7)=w\nCase 3: 8 1 (2,5)=O\nCase 4: 30 too ambiguous</td></tr></table>\n\n"}]}