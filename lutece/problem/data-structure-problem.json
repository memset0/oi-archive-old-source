{"title":"Data Structure Problem","time_limit":1000,"memory_limit":64,"url":"https://acm.uestc.edu.cn/problem/data-structure-problem/description","statement":[{"title":"# Content","format":"markdown","require":["katex"],"content":"\n*Data structure* is a fundamental course of Computer Science, so that each contestant is highly likely to solve this data structure problem.\n\nA Heap data structure is a binary tree with the following properties:\n1. It is a complete binary tree; that is, each level of the tree is completely filled, except possibly the bottom level. At this level, it is filled from left to right.\n2. It satisfies the heap-order property: The key stored in each node is greater than or equal to the keys stored in its children.\n\nSo such a heap is sometimes called a max-heap. (Alternatively, if the comparison is reversed, the smallest element is always in the root node, which results in a min-heap.)\n\nA binary search tree (BST), which may sometimes also be called an ordered or sorted binary tree, is a node-based binary tree data structure which has the following properties:\n1. The left subtree of a node contains only nodes with keys less than (greater than) the node's key.\n2. The right subtree of a node contains only nodes with keys greater than (less than) the node's key.\n3. Both the left and right subtrees must also be binary search trees.\n\nGiven a complete binary tree with $N$ keys, your task is to determine the type of it.\n\nNote that either a max-heap or a min-heap is acceptable, and it is also acceptable for both increasing ordered BST and decreasing ordered BST.\n"},{"title":"# Standard Input","format":"markdown","require":["katex"],"content":"\nThe first line of the input is $T$ (no more than $100$), which stands for the number of test cases you need to solve.\n\nFor each test case, the first line contains an integer $N$ ($1 \\leq N \\leq 1000$), indicating the number of keys in the binary tree. On the second line, a permutation of $1$ to $N$ is given. The key stored in root node is given by the first integer, and the $2i\\_{th}$ and $2i+1\\_{th}$ integers are keys in the left child and right child of the $i\\_{th}$ integer respectively.\n"},{"title":"# Standard Output","format":"markdown","require":["katex"],"content":"\nFor every test case, you should output `Case #k: ` first, where $k$ indicates the case number and counts from $1$. Then output the type of the binary tree:\n* `Neither` --- It is neither a Heap nor a BST.\n* `Both` --- It is both a Heap and a BST.\n* `Heap` --- It is only a Heap.\n* `BST` --- It is only a BST.\n"},{"title":"# Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>4\n1\n1\n3\n1 2 3\n3\n2 1 3\n4\n2 1 3 4</td><td>Case #1: Both\nCase #2: Heap\nCase #3: BST\nCase #4: Neither</td></tr></table>\n\n"}]}