{"title":"Betrand-Chebyshev","time_limit":1000,"memory_limit":64,"url":"https://acm.uestc.edu.cn/problem/betrand-chebyshev/description","statement":[{"title":"Content","format":"markdown","require":["katex"],"content":"\nZplinti1 has recently learn `rand()` function in C/C++. He is so excited, since he finds using that function is easy and convenient. For example, if you want to generate a integer randomly from $0$ to $9$, he can simply write `rand()%10`.\n\nHowever, `rand()` function canâ€™t generate a number which is too large. The maximum number is $32767$, by default. Zplinti1 is not satisfied with that!\n\nClever as he is, he quickly gets a way: he can multiply some `rand()` functions together, to get a much larger number. If he write `( rand()%10000 ) * ( rand()%10000 )`, he can get a number as large as $9999\\times 9999$.\n\nUnfortunately, one of his friends, bearchild, soon finds the problem: some numbers might not be got using his way described above. Zplinti1 wants to find the minimum number that cannot be got.\n\nMore precisely, we have $n$ numbers, from $a\\_0$ to $a\\_{n-1}$. And for number $a\\_i$, it is a value randomly chosen from $0$ to $b\\_i$, then we set $X$ as the product of those $n$ numbers, what is the minimum positive number that cannot be the value of $X$? If there is no problem with the new function, output `Good Function`.\n"},{"title":"Standard Input","format":"markdown","require":["katex"],"content":"\nThe first line of input contains a number $T$, indicating the number of cases. ($T\\leq 1000$)\n\nFor each case, the first line is a number $n$ ($1\\leq n \\leq 10,000$). The second line contains $n$ numbers from $b\\_0$ to $b\\_{n-1}$, all those numbers are positive numbers less than $1,000,000,000$.\n"},{"title":"Standard Output","format":"markdown","require":["katex"],"content":"\nFor each case, output `Case #i: ` first. ($i$ is the number of the test case, from $1$ to $T$). Then output the minimum value that $X$ cannot be, or `Good Function`, as described above.\n"},{"title":"Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>4\n2\n2 3\n2\n4 5\n3\n4 7 11\n3\n1 1 2</td><td>Case #1: 5\nCase #2: 7\nCase #3: 13\nCase #4: Good Function</td></tr></table>\n\n"},{"title":"Note","format":"markdown","require":["katex"],"content":"\nAs you can see, the maximum number zplinti1 can get is the product of $b\\_0$ to $b\\_{n-1}$, when each `rand()` function get its largest number. If the answer you get is larger than this maximum, you have to output `Good Function`, and it is the only case you need to output that.\n"}]}