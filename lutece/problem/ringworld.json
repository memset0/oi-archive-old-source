{"title":"Ringworld","time_limit":5000,"memory_limit":64,"url":"https://acm.uestc.edu.cn/problem/ringworld/description","statement":[{"title":"# Content","format":"markdown","require":["katex"],"content":"\nThe world is actually neither a disc or a sphere. It is a ring! There are m cities there, conveniently\ncalled $0,1,2,\\cdots ,m−1$, and arranged on the ring in the natural order: first $0$, then $1$, then $2$, $\\cdots$, then\n$m−1$, and then again $0$ (as the world is a ring, remember?). You are given a collection of contiguous\nranges of cities. Each of them starts at some city $x$, and contains also cities $x+1, x+2, \\cdots, y −1,y$,\nfor some city $y$. Note that the range can wrap around, for instance if $m = 5$, then $[3,4,0]$ is a valid\nrange, and so are $[1]$, $[2,3,4]$, or even $[3,4,0,1,2]$. Your task is to choose a single city inside each\nrange so that no city is chosen twice for two different ranges.\n"},{"title":"# Standard Input","format":"markdown","require":["katex"],"content":"\nThe input consists of several lines. The first line contains $1\\leq T\\leq 20$, the number of test cases.\nEach test case consists of a number of lines. The first line contains two integers $1\\leq m\\leq 10^9$ and\n$1\\leq n\\leq 10^5$ denoting the number of cities and the number of requests, respectively. The next $n\n$\nlines define the ranges: the $i^{th}$ row contains two integers $0\\leq x_i ,y_i < m$ describing the $i^{th}$ range\n$[x i ,x i + 1$ mod $m,...,y i ]$.\n"},{"title":"# Standard Output","format":"markdown","require":["katex"],"content":"\nFor each test case, output one line containing `YES` if it is possible to assign a unique city to each\nrequest, and `NO` otherwise.\n"},{"title":"# Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>4\n3 3\n0 1\n1 2\n2 0\n200000 3\n100000 100000\n100001 100001\n100000 100001\n6 6\n0 1\n1 2\n2 3\n3 4\n4 5\n5 0\n6 6\n0 0\n1 2\n2 3\n4 4\n4 5\n5 0</td><td>YES\nNO\nYES\nNO</td></tr></table>\n\n"}]}