{"title":"XOR Sum","time_limit":10000,"memory_limit":256,"url":"https://acm.uestc.edu.cn/problem/xor-sum/description","statement":[{"title":"# Content","format":"markdown","require":["katex"],"content":"\nGiven an array of $N$ numbers, we wish to choose a contiguous sub-sequence of the array, so that the bitwise XOR of all chosen numbers is maximum. Bitwise XOR is defined as follows: every bit in the answer is obtained by applying XOR logic on the corresponding bits of the set of numbers. For example $7$, $8$ and $5$ are XORed as follows,\n\nNumbers in binary:  $0111\\  1000\\  0101$  -----  $1010$\n\nSo the answer is $10$ (in decimal). The same answer can be obtained in C/C++/Java by using the XOR operator as $7$^$8$^$5$.\n"},{"title":"# Standard Input","format":"markdown","require":["katex"],"content":"\nThe first line contains the number of test cases $T$. The first line of each test-case contains one integer, $N$ (size of the array). The next $N$ lines of each test-case contain integers denoting the elements of the array.\n\nConstraints:\n\n* $1 ≤ T ≤ 10$\n* $1 ≤ N ≤ 100, 000$\n* All input integers will be non-negative and fit into $32$ bit signed integer.\n"},{"title":"# Standard Output","format":"markdown","require":["katex"],"content":"\nFor each test case, output a single line containing the maximum sum that can be obtained.\n"},{"title":"# Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>2\n5\n3 7 7 7 0\n5\n3 8 2 6 4</td><td>7\n15</td></tr></table>\n\n"}]}