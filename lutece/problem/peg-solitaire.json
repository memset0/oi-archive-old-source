{"title":"Peg Solitaire","time_limit":1000,"memory_limit":64,"url":"https://acm.uestc.edu.cn/problem/peg-solitaire/description","statement":[{"title":"# Content","format":"markdown","require":["katex"],"content":"\nThe game of peg solitaire, popular at the court of the French king Louis XIV, has the following\nrules. Given a two-dimensional board with a mesh of holes, each hole can contain one peg (pin).\nThe only legal move of a peg is a vertical or horizontal jump over an adjacent peg into the empty\nhole next to the jumped peg in line with it, which is then removed. The original goal of the game\nwas to leave a single peg in the predefined position on the board by performing only legal moves.\nObviously, such a solution is possible only for certain board forms and starting configurations. To\ndrop this restriction, we slightly redefine the problem: Given the starting configuration of the board,\ndetermine the minimum number of pegs that can be achieved by means of legal moves as well as the\nminimum number of moves required to reach that number of pegs.\n"},{"title":"# Standard Input","format":"markdown","require":["katex"],"content":"\nThe first line of the input contains one number, $1\\leq N\\leq 100$ which represents the number of test\ncases. Each test case is described by the following lines of input that represent the initial state of\nthe solitaire board.\n\nIn this representation `.` denotes an empty hole and `o` a hole with a peg in it. `#` indicates a part of\nthe board without a hole. All boards have the same shape, see sample input (that includes position\nof holes). In its initial state, the board can contain at most $8$ pegs. There is an empty line between\ntwo consecutive test cases.\n"},{"title":"# Standard Output","format":"markdown","require":["katex"],"content":"\nFor each test case your program should output a line with two numbers separated by a single\nwhitespace, with the first one denoting the minimum number of pegs achievable by legal moves\nstarting with the given initial state, and the second one providing the minimum required number of\nmoves.\n"},{"title":"# Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>3\n###...###\n..oo.....\n.....oo..\n.........\n###...###\n\n###...###\n..oo.o...\n...o.oo..\n...oo....\n###...###\n\n###o..###\n.o.oo....\no.o......\n.o.o.....\n###...###</td><td>1 3\n1 7\n1 7</td></tr></table>\n\n"}]}