{"title":"If You Know This,You Must Have NO GF","time_limit":1000,"memory_limit":64,"url":"https://acm.uestc.edu.cn/problem/if-you-know-this-you-must-have-no-gf/description","statement":[{"title":"Content","format":"markdown","require":["katex"],"content":"\nIn software development, Make is a utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program. Though integrated development environments and language-specific compiler features can also be used to manage a build process, Make remains widely used, especially in Unix.\n\nNow let's have a look at the grammar of makefile. Please note that in this problem, we have simplified the problem a lot, so read carefully, especially when you are familiar with such things.\n\nIn this problem, makefile contains three kinds of statements:\n\n1. `Target: [component ...]`\n<br/>\nThis is a statement to define a target. To build `Target`, you have to generate all the files in `[component ...]` at first. Here is an example:\n```\na.o: a.cc b.cc\n```\nWhich means if you want to generate file `a.o`, you have to make sure that there are already file `a.cc` and `b.cc` in the directory.\n<br/>\nEach component(including the target itself) will be a string which is a legal file's name, as `aaa` or `aaa.bbb`. \nThey will be separated by some spaces.\n<br/>\nA legal file's name will only contain letters (upper case and lower case), numbers and only contain one dot (`.`).\n<br/>\nThere won't be two Targets sharing a same file name. Also relations between files won't form a circle.\n2. `Commands`\n<br/>\nThis is a command shows how to build the Target, usually written after statement $1$. Here is an example:\n```\n    g++ a.o b.o -o main\n```\nNote this kind of commands will have **`FOUR SPACES`** at the front of the line.\n<br/>\nThere maybe two or more commands after statement $1$.\n3. `Comments`\n<br/>\nComments begin with character `#`, which should be ignored. Note that `#` can appear in any place in the line, and all character after `#` in the line shall be ignored. Here is an example:\n```\na.o: a.cc b.cc #hello world!\n```\nThis should be regarded as \n```\na.o: a.cc b.cc\n```\n\nSometimes you may find a statement is too long to be written in a single line. You can add a `\\` at the end of the line, indicating that there are still part of statement at the next line. Here is an example:\n```\nmain: a.o\\\n    b.o\n\tg++ a.o b.o -o main\n```\nThis equals to the statement\n```\nmain: a.o    b.o\n    g++ a.o b.o -o main\n```\nNotice that `\\` will only appear at end of the line and not appear in comments.\n\nNow this is all a makefile will have.\n\nYou have a makefile, and you will execute $Q$ `make` commands one by one. There are already some files in the directory.\n\nThe make command is like this:\n\n```\nmake Target\n```\n\nWhich will try to generate a file named `Target`.\n\nIf there are no such `Target` defined in the makefile, or it cannot be built since lack of files. This command will not get executed.\n\nYour task is, after executing each command, how many new files will appear in the directory?\n"},{"title":"Standard Input","format":"markdown","require":["katex"],"content":"\nThe first line has a number $T$ ($T\\leq 10$) , indicating the number of test cases.\n\nThen some lines come, indicating the content of makefile. A string `====` indicating the end of makefile. \neach line is no longer than $1000$ characters.\nthe size of makefile will not exceed $1MB$.\n\nThere are at most $500$ target in the Makefile.\n\nThen comes a single line with a number $N$($N\\leq 500$). Which is the number of files that are already in the directory.\n\nThen come $N$ lines each with a file name.\n\nThen comes a single line with a number $Q$($Q\\leq 500$). Which is the number of command you are going to execute.\n\nThen come $Q$ lines each with a command, within the pattern `make Target`.\n"},{"title":"Standard Output","format":"markdown","require":["katex"],"content":"\nFor test case $X$, output `Case #X: ` first, in a single line.\n\nThen for each command, output the number of newly built files in a single line. If the command are not executed, output $0$.\n\nThere should be a blank line **`BETWEEN`** each test case.\n"},{"title":"Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>2\nmain: a.o\\\n    b.o\n    g++ a.o b.o -o main\na.o: a.cc\n    g++ a.cc -o a.o -c\nb.o: b.cc\n    g++ b.cc -o b.o -c\nmain2: a.o c.o\n    g++ a.o c.o -o main2\n====\n3\na.cc\nb.cc\nc.o\n2\nmake main\nmake main2\n\nmain: a.o b.o\n    g++ a.o b.o -o main\na.o: a.cc\n    g++ a.cc -o a.o -c\nb.o: b.cc\n    g++ b.cc -o b.o -c\nmain2: a.o c.o\n    g++ a.o c.o -o main2\n====\n2\na.cc\nb.cc\n2\nmake main\nmake main2</td><td>Case #1:\n3\n1\n\nCase #2:\n3\n0</td></tr></table>\n\n"}]}