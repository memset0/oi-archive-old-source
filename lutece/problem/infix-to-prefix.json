{"title":"Infix to Prefix","time_limit":3210,"memory_limit":64,"url":"https://acm.uestc.edu.cn/problem/infix-to-prefix/description","statement":[{"title":"# Content","format":"markdown","require":["katex"],"content":"\nJaap wrote a solution to a lab assignment. The task was quite simple: convert an arithmetic expression in infix notation to an expression in Polish (prefix) notation. In infix notation operators are written between the operands (e.g. $12$ + $5$) while prefix notation places operators to the left of their operands (e.g. $+$ $12$ $5$).\n\nThis is the syntax of the expression Jaap had to convert:\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><em>Expression</em></td>\n<td style=\"text-align:center\">::=</td>\n<td style=\"text-align:left\"><em>Number</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\"><code>(</code><em>Expression Op Expression</em><code>)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\"><code>(-</code><em>Expression</em><code>)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>Op</em></td>\n<td style=\"text-align:center\">::=</td>\n<td style=\"text-align:left\"><code>+</code>|<code>-</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>Number</em></td>\n<td style=\"text-align:center\">::=</td>\n<td style=\"text-align:left\"><em>Digit</em>|<em>Number Digit</em></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>Digit</em></td>\n<td style=\"text-align:center\">::=</td>\n<td style=\"text-align:left\"><code>0</code>|<code>1</code>|<code>2</code>|<code>3</code>|<code>4</code>|<code>5</code>|<code>6</code>|<code>7</code>|<code>8</code>|<code>9</code></td>\n</tr>\n</tbody>\n</table>\n\n<br/>\nIf a *Number* has more than one digit, it will not start with a `0`. \n\nA *Number* has no more than $9$ digits.\n\nAt this point we have to admit that the assignment was not very well specified. More specific, the syntax of the resulting expression was not given. So Jaap had to make some decisions himself --- and he made the wrong decisions.  \n\nThis was his first mistake: he believed that in prefix notation spaces are superfluous.\nThis is true in infix notation, as there will always be an operator between two numbers.\nIn prefix notation, however, numbers must be separated from one another. Omitting spaces in prefix notation, as Jaap did,  gives rise to expressions like `+1234`, which has three different interpretations. (Exercise: draw the three different syntax trees.)\n\nThis was Jaap's second mistake: he believed that in prefix notation parentheses are superfluous.\nPrefix notation without parentheses is unambiguous only if the arity of the operators is fixed. Ambiguity occurs, for example, in the presence of both a unary and a binary minus. The expression:\n`--34`, can be read as `(- (- 3 4))`, evaluating to $1$, or as `(- (- 3) 4)`, evaluating to $-7$, and even as `(- (- 34))`, evaluating to $34$.\n\nWe do not ask you to reconstruct Jaap's program. We ask you to find out how ambiguous his output is.\n"},{"title":"# Standard Input","format":"markdown","require":["katex"],"content":"\nEach test case consists of a single line with a nonempty string of length $\\leq 1000$. The string contains only the characters `+` and `-` and digits `0` through `9`. This string is the output of Jaap's program.\n"},{"title":"# Standard Output","format":"markdown","require":["katex"],"content":"\nFor each test case, print one line containing two numbers: the smallest and largest value that can be obtained by different interpretations of the input expression.\n"},{"title":"# Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>--34\n+1234\n--09\n+111111111111\n--0071</td><td>-7 34\n46 235\n-9 9\n222222 111111222\n-71 -71</td></tr></table>\n\n"}]}