{"title":"Bracket Sequence","time_limit":1000,"memory_limit":64,"url":"https://acm.uestc.edu.cn/problem/bracket-sequence/description","statement":[{"title":"Content","format":"markdown","require":["katex"],"content":"\nThere is a sequence of brackets, which supports two kinds of operations.\n1. we can choose a interval $[l,r]$, and set all the elements range in this interval to left bracket or right bracket. \n2. we can reverse a interval, which means that for all the elements range in $[l,r]$, if it's left bracket at that time, we change it into right bracket, vice versa.\n\nFish is fond of `Regular Bracket Sequence`, so he want to know whether a interval $[l,r]$ of the sequence is regular or not after doing some operations.\n\nLet us define a regular brackets sequence in the following way: \n1. Empty sequence is a regular sequence. \n2. If `S` is a regular sequence, then `(S)` is also a regular sequences. \n3. If `A` and `B` are regular sequences, then `AB` is a regular sequence.\n"},{"title":"Standard Input","format":"markdown","require":["katex"],"content":"\nIn the first line there is an integer $T$ ($T\\leq 10$), indicates the number of test cases. Each case begins with a line containing an integers $N$ ($N \\leq 100,000$ and $N$ is a even number), the size of the initial brackets sequence. The next line contains a string whose length is $N$ consisting of `(` and `)`. In the third of each test case, there is an integer $M$($M \\leq 100,000$) indicates the number of queries. Each of the following $M$ lines contains one operation as mentioned below. The index of the bracket sequence is labeled from $0$ to $N - 1$.\n\nThree operation description:\n* `set l r c`: change all the elements range in $[l,r]$ into `(` or `)`.($c$ is `(` or `)`)\n* `reverse l r`: reverse the interval $[l,r]$\n* `query l,r`: you should answer that interval $[l,r]$ is regular or not\n"},{"title":"Standard Output","format":"markdown","require":["katex"],"content":"\nFor each test case, print a line containing the test case number (beginning with $1$) on its own line, then the answer for each `query` operation, if the interval is regular, print `YES`, otherwise print `NO`, one on each line.\n\nPrint a blank line after each test case.\n"},{"title":"Samples","format":"markdown","require":["katex"],"content":"\n<style>\n        table,table tr th, table tr td { border:1px solid #0094ff; }\n        table { width: 200px; min-height: 25px; line-height: 25px; text-align: center; border-collapse: collapse;}   \n    </style>\n<table>\n\t<tr>\n\t\t<td>Input</td>\n\t\t<td>Output</td>\n\t</tr>\n<tr><td>1\n6\n((()))\n8\nquery 0 5\nset 0 5 (\nquery 0 5\nreverse 3 5\nquery 0 5\nquery 1 4\nquery 2 3\nquery 0 4</td><td>Case 1:\nYES\nNO\nYES\nYES\nYES\nNO</td></tr></table>\n\n"},{"title":"Note","format":"markdown","require":["katex"],"content":"\nHuge input, use `scanf` instead of `cin`.\n"}]}